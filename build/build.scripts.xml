<project name="DEG Orange Spain / HPE CMS Iberia, 2017-2018" default="build" basedir=".">

  <description>
  </description>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="lib/ant-contrib-0.6.jar"/>
    </classpath>
  </taskdef>

  <target name="build"
          description="Expected parameters: -Denv=lab1|lab2|prepro|prod1|prod2 [-Dloglevel=CRITICAL|ERROR|WARNING|INFO|DEBUG|DEBUG2|DEBUG3|DEBUG4]">
    <echo></echo>
    <echo>Building Scripts files for '${env}'</echo>
    <echo></echo>

    <antcall target="build-node">
      <param name="node" value="app1"/>
    </antcall>

    <antcall target="build-node">
      <param name="node" value="app2"/>
    </antcall>

    <antcall target="build-node">
      <param name="node" value="mngr1"/>
    </antcall>

    <antcall target="build-node">
      <param name="node" value="mngr2"/>
    </antcall>

    <antcall target="build-node">
      <param name="node" value="mngr"/>
    </antcall>
  </target>

  <target name="build-node"
          description="Expected parameters: -Denv=lab1|lab2|prepro|prod1|prod2 -Dnode=mngr|mngr1|mngr2|app1|app2 [-Dloglevel=CRITICAL|ERROR|WARNING|INFO|DEBUG|DEBUG2|DEBUG3|DEBUG4]"
          depends="check,prepare-node">
    <property name="build.profiles.scripts">
      profiles/common/profile.cfg
      profiles/env/${env}/profile.cfg
      profiles/env/${env}/profile.${node}.cfg
    </property>

    <echo></echo>
    <echo>Building Scripts files for '${env}/${node}'</echo>
    <echo></echo>

    <exec executable="perl"
          dir="."
          failonerror="true">
      <arg line="-w scripts/build.pl"/>
      <arg line="-p ${build.profiles.scripts}"/>
      <arg line="-t .built/${env}/${node}/tmp/to_build"/>
      <arg value="-R"/>
      <arg line="-d .built/${env}/${node}/built"/>
      <arg line="-l ${buildloglevel}"/>
    </exec>
  </target>

  <target name="prepare-node"
          depends="check-node,clean-node">
    <mkdir dir=".built/${env}/${node}/tmp/to_build/scripts"/>
    <mkdir dir=".built/${env}/${node}/built/scripts"/>
    <copy todir=".built/${env}/${node}/tmp/to_build/scripts">
      <fileset dir="../deployment/scripts"/>
    </copy>
  </target>

  <target name="deploy-node"
          depends="check-node">
    <property file="profiles/env/${env}/scripts.${node}.properties"/>

    <scp todir="${user}:${passwd}@${host}:${destdir}" port="${port}" trust="yes">
      <fileset dir=".built/${env}/${node}/built/scripts">
        <include name="**/*.sh"/>
      </fileset>
    </scp>
  </target>

  <target name="clean"
          description="Expected parameters: -Denv=lab1|lab2|prepro|prod1|prod2"
          depends="check">
    <antcall target="clean-node">
      <param name="node" value="mngr"/>
    </antcall>

    <antcall target="clean-node">
      <param name="node" value="app1"/>
    </antcall>

    <antcall target="clean-node">
      <param name="node" value="app2"/>
    </antcall>
  </target>

  <target name="clean-node"
          description="Expected parameters: -Denv=lab1|lab2|prepro|prod1|prod2 -Dnode=mngr|mngr1|mngr2|app1|app2"
          depends="check-node">

    <delete dir=".built/${env}/${node}/tmp" includeemptydirs="true"/>
    <delete dir=".built/${env}/${node}/built/scripts" includeemptydirs="true"/>
  </target>

  <target name="check">
    <fail message="Missing parameter 'env'">
      <condition>
        <not>
          <isset property="env"/>
        </not>
      </condition>
    </fail>

    <fail message="Bad value '${env}' for parameter 'env'. Expected values: lab1|lab2|prepro|prod1|prod2">
      <condition>
        <not>
          <or>
            <equals arg1="${env}" arg2="lab1"/>
            <equals arg1="${env}" arg2="lab2"/>
            <equals arg1="${env}" arg2="prepro"/>
            <equals arg1="${env}" arg2="prod1"/>
            <equals arg1="${env}" arg2="prod2"/>
          </or>
        </not>
      </condition>
    </fail>

    <condition property="loglevel" value="INFO">
      <not>
        <isset property="loglevel"/>
      </not>
    </condition>

    <fail message="Bad value '${loglevel}' for parameter 'loglevel'. Expected values: CRITICAL|ERROR|WARNING|INFO|DEBUG|DEBUG2|DEBUG3|DEBUG4">
      <condition>
        <not>
          <or>
            <equals arg1="${loglevel}" arg2="CRITICAL"/>
            <equals arg1="${loglevel}" arg2="ERROR"/>
            <equals arg1="${loglevel}" arg2="WARNING"/>
            <equals arg1="${loglevel}" arg2="INFO"/>
            <equals arg1="${loglevel}" arg2="DEBUG"/>
            <equals arg1="${loglevel}" arg2="DEBUG2"/>
            <equals arg1="${loglevel}" arg2="DEBUG3"/>
            <equals arg1="${loglevel}" arg2="DEBUG4"/>
          </or>
        </not>
      </condition>
    </fail>

    <condition property="buildloglevel" value="1">
      <equals arg1="${loglevel}" arg2="CRITICAL"/>
    </condition>

    <condition property="buildloglevel" value="2">
      <equals arg1="${loglevel}" arg2="ERROR"/>
    </condition>

    <condition property="buildloglevel" value="3">
      <equals arg1="${loglevel}" arg2="WARNING"/>
    </condition>

    <condition property="buildloglevel" value="4">
      <equals arg1="${loglevel}" arg2="INFO"/>
    </condition>

    <condition property="buildloglevel" value="5">
      <equals arg1="${loglevel}" arg2="DEBUG"/>
    </condition>

    <condition property="buildloglevel" value="6">
      <equals arg1="${loglevel}" arg2="DEBUG2"/>
    </condition>

    <condition property="buildloglevel" value="7">
      <equals arg1="${loglevel}" arg2="DEBUG3"/>
    </condition>

    <condition property="buildloglevel" value="8">
      <equals arg1="${loglevel}" arg2="DEBUG4"/>
    </condition>
  </target>

  <target name="check-node">
    <fail message="Missing parameter 'node'">
      <condition>
        <not>
          <isset property="node"/>
        </not>
      </condition>
    </fail>

    <fail message="Bad value '${node}' for parameter 'node'. Expected values: mngr|mngr1|mngr2|app1|app2">
      <condition>
        <not>
          <or>
            <equals arg1="${node}" arg2="mngr"/>
            <equals arg1="${node}" arg2="mngr1"/>
            <equals arg1="${node}" arg2="mngr2"/>
            <equals arg1="${node}" arg2="app1"/>
            <equals arg1="${node}" arg2="app2"/>
          </or>
        </not>
      </condition>
    </fail>
  </target>

</project>
