<transformations xmlns="http://www.hp.com/usage/datastruct/transform"
	targetNamespace="http://www.hp.com/usage/datastruct/transform/radius">
	<!-- nme imports -->
	<import prefix="nme" ns="http://www.hp.com/usage/nme/nmeschema" />
	<import prefix="nme-radius" ns="http://www.hp.com/usage/nme/nmeschema/radius" />
	<!-- format imports -->
	<import prefix="xfd" ns="http://www.hp.com/usage/datastruct/xfd" />
	<import prefix="xfd-radius" ns="http://www.hp.com/usage/datastruct/xfd/radius" />
	<!-- standard transformers import -->
	<import prefix="ium" ns="http://www.hp.com/usage/datastruct/transform" />

	<import prefix="ium-tx"
		ns="com.hp.usage.datastruct.transform.transformer.nme" />

	<transformer id="AccessAcceptEncoder" from="nme-radius:AccessAccept"
		to="xfd-radius:AccessAccept">

		<transform input="UserName" output="UserName">
			<use-transformer from="nme:string" to="xfd:byte[]"
				class="ium:StringToByteArray">
				<params>
					<param name="charset" value="utf-8" />
				</params>
			</use-transformer>
		</transform>
		<transform input="ServiceType" output="ServiceType">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<transform input="FramedProtocol" output="FramedProtocol">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<transform input="FramedIPAddress" output="FramedIPAddress">
			<use-transformer from="nme:int" to="xfd:int" class="ium:IntToIntCopy" />
		</transform>
		<transform input="FramedIPNetmask" output="FramedIPNetmask">
			<use-transformer from="nme:int" to="xfd:int" class="ium:IntToIntCopy" />
		</transform>
		<transform input="FramedRouting" output="FramedRouting">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<!-- <transform input="FilterId" output="FilterId"> <use-transformer from="nme:string" 
			to="xfd:string" class="ium:StringToStringCopy" /> </transform> -->
		<transform input="FilterIds" output="FilterIds">
			<transformer from="nme-radius:FilterId[]" to="xfd-radius:FilterId[]">
				<array>
					<use-transformer from="nme-radius:FilterId" to="xfd-radius:FilterId"
						class="FilterIdGetter" />
				</array>
			</transformer>
		</transform>
		<transform input="FramedMTU" output="FramedMTU">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<!-- <transform input="FramedCompression" output="FramedCompression"> <use-transformer 
			from="nme:long" to="xfd:long" class="ium:LongToLongCopy" /> </transform> -->
		<transform input="FramedCompressions" output="FramedCompressions">
			<transformer from="nme-radius:FramedCompression[]" to="xfd-radius:FramedCompression[]">
				<array>
					<use-transformer from="nme-radius:FramedCompression"
						to="xfd-radius:FramedCompression" class="FramedCompressionGetter" />
				</array>
			</transformer>
		</transform>
		<transform input="LoginIPHosts" output="LoginIPHosts">
			<transformer from="nme-radius:LoginIPHost[]" to="xfd-radius:LoginIPHost[]">
				<array>
					<use-transformer from="nme-radius:LoginIPHost" to="xfd-radius:LoginIPHost"
						class="LoginIPHostGetter" />
				</array>
			</transformer>
		</transform>
		<!-- <transform input="LoginIPHost" output="LoginIPHost"> <use-transformer 
			from="nme:int" to="xfd:int" class="ium:IntToIntCopy" /> </transform> -->
		<transform input="LoginService" output="LoginService">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<transform input="LoginTCPPort" output="LoginTCPPort">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<transform input="ReplyMessages" output="ReplyMessages">
			<transformer from="nme-radius:ReplyMessage[]" to="xfd-radius:ReplyMessage[]">
				<array>
					<use-transformer from="nme-radius:ReplyMessage" to="xfd-radius:ReplyMessage"
						class="ReplyMessageGetter" />
				</array>
			</transformer>
		</transform>
		<!-- <transform input="ReplyMessage" output="ReplyMessage"> <use-transformer 
			from="nme:string" to="xfd:string" class="ium:StringToStringCopy" /> </transform> -->
		<transform input="CallbackNumber" output="CallbackNumber">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="CallbackId" output="CallbackId">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="FramedRoutes" output="FramedRoutes">
			<transformer from="nme-radius:FramedRoute[]" to="xfd-radius:FramedRoute[]">
				<array>
					<use-transformer from="nme-radius:FramedRoute" to="xfd-radius:FramedRoute"
						class="FramedRouteGetter" />
				</array>
			</transformer>
		</transform>
		<!-- <transform input="FramedRoute" output="FramedRoute"> <use-transformer 
			from="nme:string" to="xfd:string" class="ium:StringToStringCopy" /> </transform> -->
		<transform input="FramedIPXNetwork" output="FramedIPXNetwork">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="State" output="State">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="RadiusClasses" output="RadiusClasses">
			<transformer from="nme-radius:RadiusClass[]" to="xfd-radius:RadiusClass[]">
				<array>
					<use-transformer from="nme-radius:RadiusClass" to="xfd-radius:RadiusClass"
						class="RadiusClassGetter" />
				</array>
			</transformer>
		</transform>
		<!-- <transform input="RadiusClass" output="RadiusClass"> <use-transformer 
			from="nme:byte-array" to="xfd:byte[]" class="ium-tx:ByteArrayWrapperToByteArray" 
			/> </transform> -->
		<transform input="SessionTimeout" output="SessionTimeout">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<transform input="IdleTimeout" output="IdleTimeout">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<transform input="TerminationAction" output="TerminationAction">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<transform input="LoginLATService" output="LoginLATService">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="LoginLATNode" output="LoginLATNode">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="LoginLATGroup" output="LoginLATGroup">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="FramedAppleTalkLink" output="FramedAppleTalkLink">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<!-- transform input="FramedAppleTalkNetwork" output="FramedAppleTalkNetwork"> 
			<use-transformer from="nme:long" to="xfd:long" class="ium:LongToLongCopy" 
			/> </transform -->
		<transform input="FramedAppleTalkZone" output="FramedAppleTalkZone">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="PortLimit" output="PortLimit">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
		<transform input="LoginLATPort" output="LoginLATPort">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="EAPMessage" output="EAPMessage">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="MessageAuthenticator" output="MessageAuthenticator">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="ProxyStates" output="ProxyStates">
			<transformer from="nme-radius:ProxyState[]" to="xfd-radius:ProxyState[]">
				<array>
					<use-transformer from="nme-radius:ProxyState" to="xfd-radius:ProxyState"
						class="ProxyStateGetter" />
				</array>
			</transformer>
		</transform>
		<transform input="FramedInterfaceId" output="FramedInterfaceId">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="FramedIPv6Pool" output="FramedIPv6Pool">
			<use-transformer from="nme:byte-array" to="xfd:byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
		<transform input="VendorSpecific" output="VendorSpecific">
			<!-- <transformer from="nme-radius:CiscoVendorSpecific[]" to="xfd-radius:CiscoVendorSpecific[]"> 
				<array> <use-transformer from="nme-radius:CiscoVendorSpecific" to="xfd-radius:CiscoVendorSpecific" 
				class="VendorSpecificGetter" /> </array> </transformer> -->
			<transformer from="nme-radius:CiscoVendorSpecific" to="xfd-radius:CiscoVendorSpecific[]">
				<chain>
					<transformer from="nme-radius:CiscoVendorSpecific" to="xfd-radius:CiscoVendorSpecific">
						<script language="Groovy">
                          <![CDATA[
                          output = beanFactory.newInstance("xfd.radius.CiscoVendorSpecific");
                    if (input.CiscoAvpairFlag) {
                      output.CiscoAvpair = input.CiscoAvpair;
                    } 
                    if (input.CiscoNASPortFlag) {
                      output.CiscoNASPort = input.CiscoNASPort;
                    } 
                    if (input.CiscoFaxAccountIDOriginFlag) {
                      output.CiscoFaxAccountIDOrigin = input.CiscoFaxAccountIDOrigin;
                    } 
                    if (input.CiscoFaxMessageIDFlag) {
                      output.CiscoFaxMessageID = input.CiscoFaxMessageID;
                    } 
                    if (input.CiscoFaxPagesFlag) {
                      output.CiscoFaxPages = input.CiscoFaxPages;
                    } 
                    if (input.CiscoFaxCoverPageFlagFlag) {
                      output.CiscoFaxCoverPageFlag = input.CiscoFaxCoverPageFlag;
                    } 
                    if (input.CiscoFaxPagesFlag) {
                      output.CiscoFaxPages = input.CiscoFaxPages;
                    } 
                    if (input.CiscoFaxModemTimeFlag) {
                      output.CiscoFaxModemTime = input.CiscoFaxModemTime;
                    } 
                    if (input.CiscoFaxConnectSpeedFlag) {
                      output.CiscoFaxConnectSpeed = input.CiscoFaxConnectSpeed;
                    } 
                    if (input.CiscoFaxRecipientCountFlag) {
                      output.CiscoFaxRecipientCount = input.CiscoFaxRecipientCount;
                    } 
                    if (input.CiscoFaxProcessAbortFlagFlag) {
                      output.CiscoFaxProcessAbortFlag = input.CiscoFaxProcessAbortFlag;
                    } 
                    if (input.CiscoFaxDSNAddressFlag) {
                      output.CiscoFaxDSNAddress = input.CiscoFaxDSNAddress;
                    } 
                    if (input.CiscoFaxDSNFlagFlag) {
                      output.CiscoFaxDSNFlag = input.CiscoFaxDSNFlag;
                    } 
                    if (input.CiscoFaxDSNAddressFlag) {
                      output.CiscoFaxDSNAddress = input.CiscoFaxDSNAddress;
                    } 
                    if (input.CiscoFaxMDNAddressFlag) {
                        output.CiscoFaxMDNAddress = input.CiscoFaxMDNAddress;
                    }
                    if (input.CiscoFaxMDNFlagFlag) {
                        output.CiscoFaxMDNFlag = input.CiscoFaxMDNFlag;
                    }
                    if (input.CiscoFaxAuthStatusFlag) {
                        output.CiscoFaxAuthStatus = input.CiscoFaxAuthStatus;
                    }
                    if (input.CiscoEmailServerAddressFlag) {
                        output.CiscoEmailServerAddress = input.CiscoEmailServerAddress;
                    }
                    if (input.CiscoEmailServerACKFlagFlag) {
                        output.CiscoEmailServerACKFlag = input.CiscoEmailServerACKFlag;
                    }
                    if (input.CiscoGatewayIDFlag) {
                        output.CiscoGatewayID = input.CiscoGatewayID;
                    }
                    if (input.CiscoCallTypeFlag) {
                        output.CiscoCallType = input.CiscoCallType;
                    }
                    if (input.CiscoPortUsedFlag) {
                        output.CiscoPortUsed = input.CiscoPortUsed;
                    }
                    if (input.CiscoAbortCauseFlag) {
                        output.CiscoAbortCause = input.CiscoAbortCause;
                    }
                    if (input.CiscoCRSInfoFlag) {
                        output.CiscoCRSInfo = input.CiscoCRSInfo;
                    }
                    if (input.CiscoH323RemoteAddressFlag) {
                        output.CiscoH323RemoteAddress = input.CiscoH323RemoteAddress;
                    }
                    if (input.CiscoH323ConfIdFlag) {
                        output.CiscoH323ConfId = input.CiscoH323ConfId;
                    }
                    if (input.CiscoH323SetupTimeFlag) {
                        output.CiscoH323SetupTime = input.CiscoH323SetupTime;
                    }
                    if (input.CiscoH323CallOriginFlag) {
                        output.CiscoH323CallOrigin = input.CiscoH323CallOrigin;
                    }
                    if (input.CiscoH323CallTypeFlag) {
                        output.CiscoH323CallType = input.CiscoH323CallType;
                    }
                    if (input.CiscoH323ConnectTimeFlag) {
                        output.CiscoH323ConnectTime = input.CiscoH323ConnectTime;
                    }
                    if (input.CiscoH323DisconnectTimeFlag) {
                        output.CiscoH323DisconnectTime = input.CiscoH323DisconnectTime;
                    }
                    if (input.CiscoH323DisconnectCauseFlag) {
                        output.CiscoH323DisconnectCause = input.CiscoH323DisconnectCause;
                    }
                    if (input.CiscoH323VoiceQualityFlag) {
                        output.CiscoH323VoiceQuality = input.CiscoH323VoiceQuality;
                    }
                    if (input.CiscoH323IvrOutFlag) {
                        output.CiscoH323IvrOut = input.CiscoH323IvrOut;
                    }
                    if (input.CiscoH323GwIdFlag) {
                        output.CiscoH323GwId = input.CiscoH323GwId;
                    }
                    if (input.CiscoH323CallTreatmentFlag) {
                        output.CiscoH323CallTreatment = input.CiscoH323CallTreatment;
                    }
                    if (input.CiscoH323IncomingConnectionIDFlag) {
                        output.CiscoH323IncomingConnectionID = input.CiscoH323IncomingConnectionID;
                    }
                    if (input.CiscoH323IvrInFlag) {
                        output.CiscoH323IvrIn = input.CiscoH323IvrIn;
                    }
                    if (input.CiscoH323CreditAmountFlag) {
                        output.CiscoH323CreditAmount = input.CiscoH323CreditAmount;
                    }
                    if (input.CiscoH323CreditTimeFlag) {
                        output.CiscoH323CreditTime = input.CiscoH323CreditTime;
                    }
                    if (input.CiscoH323ReturnCodeFlag) {
                        output.CiscoH323ReturnCode = input.CiscoH323ReturnCode;
                    }
                    if (input.CiscoH323PromptIdFlag) {
                        output.CiscoH323PromptId = input.CiscoH323PromptId;
                    }
                    if (input.CiscoH323TimeAndDayFlag) {
                        output.CiscoH323TimeAndDay = input.CiscoH323TimeAndDay;
                    }
                    if (input.CiscoH323RedirectNumberFlag) {
                        output.CiscoH323RedirectNumber = input.CiscoH323RedirectNumber;
                    }
                    if (input.CiscoH323PreferredLangFlag) {
                        output.CiscoH323PreferredLang = input.CiscoH323PreferredLang;
                    }
                    if (input.CiscoH323RedirectIpAddrFlag) {
                        output.CiscoH323RedirectIpAddr = input.CiscoH323RedirectIpAddr;
                    }
                    if (input.CiscoH323BillingModelFlag) {
                        output.CiscoH323BillingModel = input.CiscoH323BillingModel;
                    }
                    if (input.CiscoH323CurrencyTypeFlag) {
                        output.CiscoH323CurrencyType = input.CiscoH323CurrencyType;
                    }
                    if (input.CiscoUCPIPPoolIDFlag) {
                        output.CiscoUCPIPPoolID = input.CiscoUCPIPPoolID;
                    }
                    if (input.CiscoUCPUserMaxSessionsFlag) {
                        output.CiscoUCPUserMaxSessions = input.CiscoUCPUserMaxSessions;
                    }
                    if (input.CiscoUCPUserSessionCountFlag) {
                        output.CiscoUCPUserSessionCount = input.CiscoUCPUserSessionCount;
                    }
                    if (input.CiscoUCPNextSessionIDFlag) {
                        output.CiscoUCPNextSessionID = input.CiscoUCPNextSessionID;
                    }
                    if (input.CiscoUCPVPDNMaxSessionsFlag) {
                        output.CiscoUCPVPDNMaxSessions = input.CiscoUCPVPDNMaxSessions;
                    }
                    if (input.CiscoUCPVPDNSessionCountFlag) {
                        output.CiscoUCPVPDNSessionCount = input.CiscoUCPVPDNSessionCount;
                    }
                    if (input.CiscoUCPBChannelMaxSessionsFlag) {
                        output.CiscoUCPBChannelMaxSessions = input.CiscoUCPBChannelMaxSessions;
                    }
                    if (input.CiscoUCPBChannelSessionCountFlag) {
                        output.CiscoUCPBChannelSessionCount = input.CiscoUCPBChannelSessionCount;
                    }
                    if (input.CiscoUCPStatusFlag) {
                        output.CiscoUCPStatus = input.CiscoUCPStatus;
                    }
                    if (input.CiscoUCPBLOBAttributeLengthFlag) {
                        output.CiscoUCPBLOBAttributeLength = input.CiscoUCPBLOBAttributeLength;
                    }
                    if (input.CiscoUCPDisableStatusFlag) {
                        output.CiscoUCPDisableStatus = input.CiscoUCPDisableStatus;
                    }
                    if (input.CiscoUCPBlockAccessRangeFlag) {
                        output.CiscoUCPBlockAccessRange = input.CiscoUCPBlockAccessRange;
                    }
                    if (input.CiscoUCPHomePOPIDFlag) {
                        output.CiscoUCPHomePOPID = input.CiscoUCPHomePOPID;
                    }
                    if (input.CiscoUCPIPAddressesFlag) {
                        output.CiscoUCPIPAddresses = input.CiscoUCPIPAddresses;
                    }
                    if (input.CiscoUCPSessionInfoFlag) {
                        output.CiscoUCPSessionInfo = input.CiscoUCPSessionInfo;
                    }
                    if (input.CiscoAscendAVpairsFlag) {
                        output.CiscoAscendAVpairs = input.CiscoAscendAVpairs;
                    }
                    if (input.CiscoSSGAccountInfoFlag) {
                        output.CiscoSSGAccountInfo = input.CiscoSSGAccountInfo;
                    }
                    if (input.CiscoSSGServiceInfoFlag) {
                        output.CiscoSSGServiceInfo = input.CiscoSSGServiceInfo;
                    }
                    if (input.CiscoSSGCommandCodeFlag) {
                        output.CiscoSSGCommandCode = input.CiscoSSGCommandCode;
                    }
                    if (input.CiscoSSGControlInfoFlag) {
                        output.CiscoSSGControlInfo = input.CiscoSSGControlInfo;
                    }
                           
                          return output;
                          ]]>
						</script>
					</transformer>
					<use-transformer from="xfd-radius:CiscoVendorSpecific"
						to="xfd-radius:CiscoVendorSpecific[]" class="ium:ObjectToObjectArrayWrap">
					</use-transformer>
				</chain>
			</transformer>
		</transform>
		<transform input="LoginIPv6Hosts" output="LoginIPv6Hosts">
			<transformer from="nme-radius:LoginIPv6Host[]" to="xfd-radius:LoginIPv6Host[]">
				<array>
					<use-transformer from="nme-radius:LoginIPv6Host"
						to="xfd-radius:LoginIPv6Host" class="LoginIPv6HostGetter" />
				</array>
			</transformer>
		</transform>
		<transform input="FramedIPv6Routes" output="FramedIPv6Routes">
			<transformer from="nme-radius:FramedIPv6Route[]" to="xfd-radius:FramedIPv6Route[]">
				<array>
					<use-transformer from="nme-radius:FramedIPv6Route"
						to="xfd-radius:FramedIPv6Route" class="FramedIPv6RouteGetter" />
				</array>
			</transformer>
		</transform>
		<transform input="FramedAppleTalkNetworks" output="FramedAppleTalkNetworks">
			<transformer from="nme-radius:FramedAppleTalkNetwork[]"
				to="xfd-radius:FramedAppleTalkNetwork[]">
				<array>
					<use-transformer from="nme-radius:FramedAppleTalkNetwork"
						to="xfd-radius:FramedAppleTalkNetwork" class="FramedAppleTalkNetworkGetter" />
				</array>
			</transformer>
		</transform>
		<transform input="FramedIPv6Prefixes" output="FramedIPv6Prefixes">
			<transformer from="nme-radius:FramedIPv6Prefix[]" to="xfd-radius:FramedIPv6Prefix[]">
				<array>
					<use-transformer from="nme-radius:FramedIPv6Prefix"
						to="xfd-radius:FramedIPv6Prefix" class="FramedIPv6PrefixGetter" />
				</array>
			</transformer>
		</transform>
        <transform input="MSISDN" output="MSISDN.attributeData">
            <use-transformer from="string" to="string" class="ium:StringToStringIdentity" />
        </transform>
	</transformer>
	<transformer id="ProxyStateGetter" from="nme-radius:ProxyState"
		to="xfd-radius:ProxyState">
		<transform input="value" output="value">
			<use-transformer from="nme:byte-array" to="byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
	</transformer>
	<transformer id="FilterIdGetter" from="nme-radius:FilterId"
		to="xfd-radius:FilterId">
		<transform input="value" output="value">
			<use-transformer from="nme:string" to="xfd:string"
				class="ium:StringToStringCopy" />
		</transform>
	</transformer>
	<transformer id="FramedCompressionGetter" from="nme-radius:FramedCompression"
		to="xfd-radius:FramedCompression">
		<transform input="value" output="value">
			<use-transformer from="nme:long" to="xfd:long"
				class="ium:LongToLongCopy" />
		</transform>
	</transformer>
	<transformer id="LoginIPHostGetter" from="nme-radius:LoginIPHost"
		to="xfd-radius:LoginIPHost">
		<transform input="value" output="value">
			<use-transformer from="nme:int" to="xfd:int" class="ium:IntToIntCopy" />
		</transform>
	</transformer>
	<transformer id="ReplyMessageGetter" from="nme-radius:ReplyMessage"
		to="xfd-radius:ReplyMessage">
		<transform input="value" output="value">
			<use-transformer from="nme:string" to="xfd:string"
				class="ium:StringToStringCopy" />
		</transform>
	</transformer>
	<transformer id="FramedRouteGetter" from="nme-radius:FramedRoute"
		to="xfd-radius:FramedRoute">
		<transform input="value" output="value">
			<use-transformer from="nme:string" to="xfd:string"
				class="ium:StringToStringCopy" />
		</transform>
	</transformer>
	<transformer id="RadiusClassGetter" from="nme-radius:RadiusClass"
		to="xfd-radius:RadiusClass">
		<transform input="value" output="value">
			<use-transformer from="nme:byte-array" to="byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
	</transformer>
	<transformer id="VendorSpecificGetter" from="nme-radius:CiscoVendorSpecific"
		to="xfd-radius:CiscoVendorSpecific">
		<transform input="CiscoAvpair" output="CiscoAvpair">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoNASPort" output="CiscoNASPort">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxAccountIDOrigin" output="CiscoFaxAccountIDOrigin">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxMessageID" output="CiscoFaxMessageID">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxPages" output="CiscoFaxPages">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxCoverPageFlag" output="CiscoFaxCoverPageFlag">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxModemTime" output="CiscoFaxModemTime">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxConnectSpeed" output="CiscoFaxConnectSpeed">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxRecipientCount" output="CiscoFaxRecipientCount">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxProcessAbortFlag" output="CiscoFaxProcessAbortFlag">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxDSNAddress" output="CiscoFaxDSNAddress">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxDSNFlag" output="CiscoFaxDSNFlag">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxMDNAddress" output="CiscoFaxMDNAddress">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxMDNFlag" output="CiscoFaxMDNFlag">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoFaxAuthStatus" output="CiscoFaxAuthStatus">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoEmailServerAddress" output="CiscoEmailServerAddress">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoEmailServerACKFlag" output="CiscoEmailServerACKFlag">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoGatewayID" output="CiscoGatewayID">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoCallType" output="CiscoCallType">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoPortUsed" output="CiscoPortUsed">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoAbortCause" output="CiscoAbortCause">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoCRSInfo" output="CiscoCRSInfo">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323RemoteAddress" output="CiscoH323RemoteAddress">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323ConfId" output="CiscoH323ConfId">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323SetupTime" output="CiscoH323SetupTime">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323CallOrigin" output="CiscoH323CallOrigin">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323CallType" output="CiscoH323CallType">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323ConnectTime" output="CiscoH323ConnectTime">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323DisconnectTime" output="CiscoH323DisconnectTime">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323DisconnectCause" output="CiscoH323DisconnectCause">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323VoiceQuality" output="CiscoH323VoiceQuality">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323IvrOut" output="CiscoH323IvrOut">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323GwId" output="CiscoH323GwId">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323CallTreatment" output="CiscoH323CallTreatment">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323IncomingConnectionID" output="CiscoH323IncomingConnectionID">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323IvrIn" output="CiscoH323IvrIn">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323CreditAmount" output="CiscoH323CreditAmount">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323CreditTime" output="CiscoH323CreditTime">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323ReturnCode" output="CiscoH323ReturnCode">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323PromptId" output="CiscoH323PromptId">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323TimeAndDay" output="CiscoH323TimeAndDay">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323RedirectNumber" output="CiscoH323RedirectNumber">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323PreferredLang" output="CiscoH323PreferredLang">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323RedirectIpAddr" output="CiscoH323RedirectIpAddr">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323BillingModel" output="CiscoH323BillingModel">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoH323CurrencyType" output="CiscoH323CurrencyType">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPIPPoolID" output="CiscoUCPIPPoolID">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPUserMaxSessions" output="CiscoUCPUserMaxSessions">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPUserSessionCount" output="CiscoUCPUserSessionCount">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPNextSessionID" output="CiscoUCPNextSessionID">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPVPDNMaxSessions" output="CiscoUCPVPDNMaxSessions">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPVPDNSessionCount" output="CiscoUCPVPDNSessionCount">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPBChannelMaxSessions" output="CiscoUCPBChannelMaxSessions">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPBChannelSessionCount" output="CiscoUCPBChannelSessionCount">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPStatus" output="CiscoUCPStatus">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPBLOBAttributeLength" output="CiscoUCPBLOBAttributeLength">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPDisableStatus" output="CiscoUCPDisableStatus">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPBlockAccessRange" output="CiscoUCPBlockAccessRange">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPHomePOPID" output="CiscoUCPHomePOPID">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPIPAddresses" output="CiscoUCPIPAddresses">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoUCPSessionInfo" output="CiscoUCPSessionInfo">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoAscendAVpairs" output="CiscoAscendAVpairs">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoSSGAccountInfo" output="CiscoSSGAccountInfo">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoSSGServiceInfo" output="CiscoSSGServiceInfo">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoSSGCommandCode" output="CiscoSSGCommandCode">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
		<transform input="CiscoSSGControlInfo" output="CiscoSSGControlInfo">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
	</transformer>
	<transformer id="FramedIPv6PrefixGetter" from="nme-radius:FramedIPv6Prefix"
		to="xfd-radius:FramedIPv6Prefix">
		<transform input="value" output="value">
			<use-transformer from="nme:byte-array" to="byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
	</transformer>
	<transformer id="LoginIPv6HostGetter" from="nme-radius:LoginIPv6Host"
		to="xfd-radius:LoginIPv6Host">
		<transform input="value" output="value">
			<use-transformer from="nme:byte-array" to="byte[]"
				class="ium-tx:ByteArrayWrapperToByteArray" />
		</transform>
	</transformer>
	<transformer id="FramedIPv6RouteGetter" from="nme-radius:FramedIPv6Route"
		to="xfd-radius:FramedIPv6Route">
		<transform input="value" output="value">
			<use-transformer from="string" to="string"
				class="ium:StringToStringIdentity" />
		</transform>
	</transformer>
	<transformer id="FramedAppleTalkNetworkGetter" from="nme-radius:FramedAppleTalkNetwork"
		to="xfd-radius:FramedAppleTalkNetwork">
		<transform input="value" output="value">
			<use-transformer from="long" to="long" class="ium:LongToLongCopy" />
		</transform>
	</transformer>
</transformations>



