<transformations xmlns="http://www.hp.com/usage/datastruct/transform"
    targetNamespace="http://www.hp.com/usage/datastruct/transform/XFD_PacketCableCopsFormat_to_SNME_PacketCableCopsFormat">

    <import prefix="t" ns="http://www.hp.com/usage/datastruct/transform" />
    <import prefix="tnme" ns="http://www.hp.com/usage/datastruct/transform/nme" />

    <import prefix="xfd" ns="http://www.hp.com/usage/datastruct/xfd/PacketCableCopsFormat" />
    <import prefix="snme" ns="http://www.hp.com/usage/nme/nmeschema/PacketCableCopsFormat" />
    <import prefix="nme" ns="http://www.hp.com/usage/nme/nmeschema" />

    <transformer id="XFD_PacketCableMessage_to_SNME_PacketCableMessage" from="xfd:PacketCableMessage" to="snme:PacketCableMessage">
        <transform input="version" output="version">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="flags" output="flags">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="opCode" output="opCode">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="clientType" output="clientType">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="length" output="length">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="request" output="request">
            <use-transformer from="xfd:Request" to="snme:Request" class="XFD_Request_to_SNME_Request" />
        </transform>
        <transform input="decision" output="decision">
            <use-transformer from="xfd:Decision" to="snme:Decision" class="XFD_Decision_to_SNME_Decision" />
        </transform>
        <transform input="reportState" output="reportState">
            <use-transformer from="xfd:ReportState" to="snme:ReportState" class="XFD_ReportState_to_SNME_ReportState" />
        </transform>
        <transform input="deleteRequestState" output="deleteRequestState">
            <use-transformer from="xfd:DeleteRequestState" to="snme:DeleteRequestState" class="XFD_DeleteRequestState_to_SNME_DeleteRequestState" />
        </transform>
        <transform input="clientOpen" output="clientOpen">
            <use-transformer from="xfd:ClientOpen" to="snme:ClientOpen" class="XFD_ClientOpen_to_SNME_ClientOpen" />
        </transform>
        <transform input="clientAccept" output="clientAccept">
            <use-transformer from="xfd:ClientAccept" to="snme:ClientAccept" class="XFD_ClientAccept_to_SNME_ClientAccept" />
        </transform>
        <transform input="clientClose" output="clientClose">
            <use-transformer from="xfd:ClientClose" to="snme:ClientClose" class="XFD_ClientClose_to_SNME_ClientClose" />
        </transform>
    </transformer>

    <transformer id="XFD_Request_to_SNME_Request" from="xfd:Request" to="snme:Request">
        <transform input="handle" output="handle">
            <use-transformer from="xfd:Handle" to="snme:Handle" class="XFD_Handle_to_SNME_Handle" />
        </transform>
        <transform input="context" output="context">
            <use-transformer from="xfd:Context" to="snme:Context" class="XFD_Context_to_SNME_Context" />
        </transform>
        <transform input="csiCType1" output="csiCType1">
            <use-transformer from="xfd:GateControlResponse" to="snme:GateControlResponse" class="XFD_GateControlResponse_to_SNME_GateControlResponse" />
        </transform>
        <transform input="csiCType2" output="csiCType2">
            <use-transformer from="xfd:CSICType2" to="snme:CSICType2" class="XFD_CSICType2_to_SNME_CSICType2" />
        </transform>
    </transformer>

    <transformer id="XFD_Decision_to_SNME_Decision" from="xfd:Decision" to="snme:Decision">
        <transform input="handle" output="handle">
            <use-transformer from="xfd:Handle" to="snme:Handle" class="XFD_Handle_to_SNME_Handle" />
        </transform>
        <transform input="context" output="context">
            <use-transformer from="xfd:Context" to="snme:Context" class="XFD_Context_to_SNME_Context" />
        </transform>
        <transform input="decisionCType1" output="decisionCType1">
            <use-transformer from="xfd:DecisionCType1" to="snme:DecisionCType1" class="XFD_DecisionCType1_to_SNME_DecisionCType1" />
        </transform>
        <transform input="decisionCType4" output="decisionCType4">
            <use-transformer from="xfd:GateControlCommand" to="snme:GateControlCommand" class="XFD_GateControlCommand_to_SNME_GateControlCommand" />
        </transform>
        <transform input="error" output="error">
            <use-transformer from="xfd:Error" to="snme:Error" class="XFD_Error_to_SNME_Error" />
        </transform>
    </transformer>

    <transformer id="XFD_ReportState_to_SNME_ReportState" from="xfd:ReportState" to="snme:ReportState">
        <transform input="handle" output="handle">
            <use-transformer from="xfd:Handle" to="snme:Handle" class="XFD_Handle_to_SNME_Handle" />
        </transform>
        <transform input="reportType" output="reportType">
            <use-transformer from="xfd:ReportType" to="snme:ReportType" class="XFD_ReportType_to_SNME_ReportType" />
        </transform>
        <transform input="csiCType1" output="csiCType1">
            <use-transformer from="xfd:GateControlResponse" to="snme:GateControlResponse" class="XFD_GateControlResponse_to_SNME_GateControlResponse" />
        </transform>
        <transform input="csiCType2" output="csiCType2">
            <use-transformer from="xfd:CSICType2" to="snme:CSICType2" class="XFD_CSICType2_to_SNME_CSICType2" />
        </transform>
    </transformer>

    <transformer id="XFD_DeleteRequestState_to_SNME_DeleteRequestState" from="xfd:DeleteRequestState" to="snme:DeleteRequestState">
        <transform input="handle" output="handle">
            <use-transformer from="xfd:Handle" to="snme:Handle" class="XFD_Handle_to_SNME_Handle" />
        </transform>
        <transform input="reason" output="reason">
            <use-transformer from="xfd:Reason" to="snme:Reason" class="XFD_Reason_to_SNME_Reason" />
        </transform>
    </transformer>

    <transformer id="XFD_ClientOpen_to_SNME_ClientOpen" from="xfd:ClientOpen" to="snme:ClientOpen">
        <transform input="pepId" output="pepId">
            <use-transformer from="xfd:PEPID" to="snme:PEPID" class="XFD_PEPID_to_SNME_PEPID" />
        </transform>
        <transform input="versionInfo" output="versionInfo">
            <use-transformer from="xfd:PacketCableVersionInfo" to="snme:PacketCableVersionInfo" class="XFD_PacketCableVersionInfo_to_SNME_PacketCableVersionInfo" />
        </transform>
    </transformer>

    <transformer id="XFD_ClientAccept_to_SNME_ClientAccept" from="xfd:ClientAccept" to="snme:ClientAccept">
        <transform input="keepAliveTimer" output="keepAliveTimer">
            <use-transformer from="xfd:KeepAliveTimer" to="snme:KeepAliveTimer" class="XFD_KeepAliveTimer_to_SNME_KeepAliveTimer" />
        </transform>
    </transformer>

    <transformer id="XFD_ClientClose_to_SNME_ClientClose" from="xfd:ClientClose" to="snme:ClientClose">
        <transform input="error" output="error">
            <use-transformer from="xfd:Error" to="snme:Error" class="XFD_Error_to_SNME_Error" />
        </transform>
    </transformer>

    <transformer id="XFD_PacketCableVersionInfo_to_SNME_PacketCableVersionInfo" from="xfd:PacketCableVersionInfo" to="snme:PacketCableVersionInfo">
        <transform input="versionInfo" output="versionInfo">
            <use-transformer from="xfd:VersionInfo" to="snme:VersionInfo" class="XFD_VersionInfo_to_SNME_VersionInfo" />
        </transform>
    </transformer>

    <transformer id="XFD_AMID_to_SNME_AMID" from="xfd:AMID" to="snme:AMID">
        <transform input="applicationType" output="applicationType">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="applicationManagerTag" output="applicationManagerTag">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_SubIDIPV4_to_SNME_SubIDIPV4" from="xfd:SubIDIPV4" to="snme:SubIDIPV4">
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
    </transformer>

    <transformer id="XFD_SubIDIPV6_to_SNME_SubIDIPV6" from="xfd:SubIDIPV6" to="snme:SubIDIPV6">
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
    </transformer>

    <transformer id="XFD_GateID_to_SNME_GateID" from="xfd:GateID" to="snme:GateID">
        <transform input="gateID" output="gateID">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_GateSpec_to_SNME_GateSpec" from="xfd:GateSpec" to="snme:GateSpec">
        <transform input="flagsDirectionBit" output="flagsDirectionBit">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="flagsDscpTosBit" output="flagsDscpTosBit">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="flagsReservedBits" output="flagsReservedBits">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="dscpTosOverwrite" output="dscpTosOverwrite">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="dscpTosMask" output="dscpTosMask">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="sessionClassIDPriority" output="sessionClassIDPriority">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="sessionClassIDPreemption" output="sessionClassIDPreemption">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="sessionClassIDConfigurable" output="sessionClassIDConfigurable">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="timerT1" output="timerT1">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="timerT2" output="timerT2">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="timerT3" output="timerT3">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="timerT4" output="timerT4">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_Classifier_to_SNME_Classifier" from="xfd:Classifier" to="snme:Classifier">
        <transform input="protocolID" output="protocolID">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="dscpTosField" output="dscpTosField">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="dscpTosMask" output="dscpTosMask">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="iPSourceAddress" output="iPSourceAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="iPDestinationAddress" output="iPDestinationAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="sourcePort" output="sourcePort">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="destinationPort" output="destinationPort">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="priority" output="priority">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reservedEnd" output="reservedEnd">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
    </transformer>

    <transformer id="XFD_ExtendedClassifier_to_SNME_ExtendedClassifier" from="xfd:ExtendedClassifier" to="snme:ExtendedClassifier">
        <transform input="protocolID" output="protocolID">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="dscpTosField" output="dscpTosField">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="dscpTosMask" output="dscpTosMask">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="iPSourceAddress" output="iPSourceAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="iPSourceMask" output="iPSourceMask">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="iPDestinationAddress" output="iPDestinationAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="iPDestinationMask" output="iPDestinationMask">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="sourcePortStart" output="sourcePortStart">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="sourcePortEnd" output="sourcePortEnd">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="destinationPortStart" output="destinationPortStart">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="destinationPortEnd" output="destinationPortEnd">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="classifierID" output="classifierID">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="priority" output="priority">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="activationState" output="activationState">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="action" output="action">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reservedEnd" output="reservedEnd">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
    </transformer>

    <transformer id="XFD_IPV6Classifier_to_SNME_IPV6Classifier" from="xfd:IPV6Classifier" to="snme:IPV6Classifier">
        <transform input="reserved" output="reserved">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="flags" output="flags">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="tcLow" output="tcLow">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="tcHigh" output="tcHigh">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="tcMask" output="tcMask">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="flowLabel" output="flowLabel">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="nextHeaderType" output="nextHeaderType">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="sourcePrefixLength" output="sourcePrefixLength">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="destinationPrefixLength" output="destinationPrefixLength">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="iPV6SourceAddress" output="iPV6SourceAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="iPV6DestinationAddress" output="iPV6DestinationAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="sourcePortStart" output="sourcePortStart">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="sourcePortEnd" output="sourcePortEnd">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="destinationPortStart" output="destinationPortStart">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="destinationPortEnd" output="destinationPortEnd">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="classifierID" output="classifierID">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="priority" output="priority">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="activationState" output="activationState">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="action" output="action">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reservedEnd" output="reservedEnd">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
    </transformer>

    <transformer id="XFD_FlowSpec_to_SNME_FlowSpec" from="xfd:FlowSpec" to="snme:FlowSpec">
        <transform input="envelope" output="envelope">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="serviceNumber" output="serviceNumber">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserveFirst" output="reserveFirst">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserveSecond" output="reserveSecond">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="authEnvelope" output="authEnvelope">
            <use-transformer from="xfd:FlowSpecEnvelope" to="snme:FlowSpecEnvelope" class="XFD_FlowSpecEnvelope_to_SNME_FlowSpecEnvelope" />
        </transform>
        <transform input="authReservedEnvelope" output="authReservedEnvelope">
            <use-transformer from="xfd:AuthReservedEnvelope" to="snme:AuthReservedEnvelope" class="XFD_AuthReservedEnvelope_to_SNME_AuthReservedEnvelope" />
        </transform>
        <transform input="authReservedCommittedEnvelope" output="authReservedCommittedEnvelope">
            <use-transformer from="xfd:AuthReservedCommittedEnvelope" to="snme:AuthReservedCommittedEnvelope" class="XFD_AuthReservedCommittedEnvelope_to_SNME_AuthReservedCommittedEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedEnvelope_to_SNME_AuthReservedEnvelope" from="xfd:AuthReservedEnvelope" to="snme:AuthReservedEnvelope">
        <transform input="authorizedEnvelope" output="authorizedEnvelope">
            <use-transformer from="xfd:FlowSpecEnvelope" to="snme:FlowSpecEnvelope" class="XFD_FlowSpecEnvelope_to_SNME_FlowSpecEnvelope" />
        </transform>
        <transform input="reservedEnvelope" output="reservedEnvelope">
            <use-transformer from="xfd:FlowSpecEnvelope" to="snme:FlowSpecEnvelope" class="XFD_FlowSpecEnvelope_to_SNME_FlowSpecEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedCommittedEnvelope_to_SNME_AuthReservedCommittedEnvelope" from="xfd:AuthReservedCommittedEnvelope" to="snme:AuthReservedCommittedEnvelope">
        <transform input="authorizedEnvelope" output="authorizedEnvelope">
            <use-transformer from="xfd:FlowSpecEnvelope" to="snme:FlowSpecEnvelope" class="XFD_FlowSpecEnvelope_to_SNME_FlowSpecEnvelope" />
        </transform>
        <transform input="reservedEnvelope" output="reservedEnvelope">
            <use-transformer from="xfd:FlowSpecEnvelope" to="snme:FlowSpecEnvelope" class="XFD_FlowSpecEnvelope_to_SNME_FlowSpecEnvelope" />
        </transform>
        <transform input="committedEnvelope" output="committedEnvelope">
            <use-transformer from="xfd:FlowSpecEnvelope" to="snme:FlowSpecEnvelope" class="XFD_FlowSpecEnvelope_to_SNME_FlowSpecEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_FlowSpecEnvelope_to_SNME_FlowSpecEnvelope" from="xfd:FlowSpecEnvelope" to="snme:FlowSpecEnvelope">
        <transform input="tokenBucketRate" output="tokenBucketRate">
            <use-transformer from="byte[]" to="nme:float" class="t:ByteArrayToFloat" />
        </transform>
        <transform input="tokenBucketSize" output="tokenBucketSize">
            <use-transformer from="byte[]" to="nme:float" class="t:ByteArrayToFloat" />
        </transform>
        <transform input="peakDataRate" output="peakDataRate">
            <use-transformer from="byte[]" to="nme:float" class="t:ByteArrayToFloat" />
        </transform>
        <transform input="minPolicedUnit" output="minPolicedUnit">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="maxPacketSize" output="maxPacketSize">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="rate" output="rate">
            <use-transformer from="byte[]" to="nme:float" class="t:ByteArrayToFloat" />
        </transform>
        <transform input="slackTerm" output="slackTerm">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_DocSisServiceClass_to_SNME_DocSisServiceClass" from="xfd:DocSisServiceClass" to="snme:DocSisServiceClass">
        <transform input="envelope" output="envelope">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="xfd:Reserved3Bytes" to="snme:Reserved3Bytes" class="XFD_Reserved3Bytes_to_SNME_Reserved3Bytes" />
        </transform>
        <transform input="serviceClassName" output="serviceClassName">
            <use-transformer from="string" to="string" class="t:StringToStringCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_Reserved3Bytes_to_SNME_Reserved3Bytes" from="xfd:Reserved3Bytes" to="snme:Reserved3Bytes">
        <transform input="reserveFirst" output="reserveFirst">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserveSecond" output="reserveSecond">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserveThird" output="reserveThird">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_BestEffortService_to_SNME_BestEffortService" from="xfd:BestEffortService" to="snme:BestEffortService">
        <transform input="envelope" output="envelope">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="xfd:Reserved3Bytes" to="snme:Reserved3Bytes" class="XFD_Reserved3Bytes_to_SNME_Reserved3Bytes" />
        </transform>
        <transform input="authBESEnvelope" output="authBESEnvelope">
            <use-transformer from="xfd:BestEffortServiceEnvelope" to="snme:BestEffortServiceEnvelope" class="XFD_BestEffortServiceEnvelope_to_SNME_BestEffortServiceEnvelope" />
        </transform>
        <transform input="authReservedBESEnvelope" output="authReservedBESEnvelope">
            <use-transformer from="xfd:AuthReservedBESEnvelope" to="snme:AuthReservedBESEnvelope" class="XFD_AuthReservedBESEnvelope_to_SNME_AuthReservedBESEnvelope" />
        </transform>
        <transform input="authReservedCommittedBESEnvelope" output="authReservedCommittedBESEnvelope">
            <use-transformer from="xfd:AuthReservedCommittedBESEnvelope" to="snme:AuthReservedCommittedBESEnvelope" class="XFD_AuthReservedCommittedBESEnvelope_to_SNME_AuthReservedCommittedBESEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedBESEnvelope_to_SNME_AuthReservedBESEnvelope" from="xfd:AuthReservedBESEnvelope" to="snme:AuthReservedBESEnvelope">
        <transform input="authorizedBESEnvelope" output="authorizedBESEnvelope">
            <use-transformer from="xfd:BestEffortServiceEnvelope" to="snme:BestEffortServiceEnvelope" class="XFD_BestEffortServiceEnvelope_to_SNME_BestEffortServiceEnvelope" />
        </transform>
        <transform input="reservedBESEnvelope" output="reservedBESEnvelope">
            <use-transformer from="xfd:BestEffortServiceEnvelope" to="snme:BestEffortServiceEnvelope" class="XFD_BestEffortServiceEnvelope_to_SNME_BestEffortServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedCommittedBESEnvelope_to_SNME_AuthReservedCommittedBESEnvelope" from="xfd:AuthReservedCommittedBESEnvelope" to="snme:AuthReservedCommittedBESEnvelope">
        <transform input="authorizedBESEnvelope" output="authorizedBESEnvelope">
            <use-transformer from="xfd:BestEffortServiceEnvelope" to="snme:BestEffortServiceEnvelope" class="XFD_BestEffortServiceEnvelope_to_SNME_BestEffortServiceEnvelope" />
        </transform>
        <transform input="reservedBESEnvelope" output="reservedBESEnvelope">
            <use-transformer from="xfd:BestEffortServiceEnvelope" to="snme:BestEffortServiceEnvelope" class="XFD_BestEffortServiceEnvelope_to_SNME_BestEffortServiceEnvelope" />
        </transform>
        <transform input="committedBESEnvelope" output="committedBESEnvelope">
            <use-transformer from="xfd:BestEffortServiceEnvelope" to="snme:BestEffortServiceEnvelope" class="XFD_BestEffortServiceEnvelope_to_SNME_BestEffortServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_BestEffortServiceEnvelope_to_SNME_BestEffortServiceEnvelope" from="xfd:BestEffortServiceEnvelope" to="snme:BestEffortServiceEnvelope">
        <transform input="trafficPriority" output="trafficPriority">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="commonServiceEnvelopePartOne" output="commonServiceEnvelopePartOne">
            <use-transformer from="xfd:CommonServiceEnvelopePartOne" to="snme:CommonServiceEnvelopePartOne" class="XFD_CommonServiceEnvelopePartOne_to_SNME_CommonServiceEnvelopePartOne" />
        </transform>
        <transform input="commonServiceEnvelopePartTwo" output="commonServiceEnvelopePartTwo">
            <use-transformer from="xfd:CommonServiceEnvelopePartTwo" to="snme:CommonServiceEnvelopePartTwo" class="XFD_CommonServiceEnvelopePartTwo_to_SNME_CommonServiceEnvelopePartTwo" />
        </transform>
    </transformer>

    <transformer id="XFD_CommonServiceEnvelopePartOne_to_SNME_CommonServiceEnvelopePartOne" from="xfd:CommonServiceEnvelopePartOne" to="snme:CommonServiceEnvelopePartOne">
        <transform input="requestTransmissionPolicy" output="requestTransmissionPolicy">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="maxSustainedTrafficRate" output="maxSustainedTrafficRate">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="maxTrafficBurst" output="maxTrafficBurst">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="minReservedTrafficRate" output="minReservedTrafficRate">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="assumedMinResTrafRatePktSize" output="assumedMinResTrafRatePktSize">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="maxConcatenatedBurst" output="maxConcatenatedBurst">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_CommonServiceEnvelopePartTwo_to_SNME_CommonServiceEnvelopePartTwo" from="xfd:CommonServiceEnvelopePartTwo" to="snme:CommonServiceEnvelopePartTwo">
        <transform input="streamPeakTrafficRate" output="streamPeakTrafficRate">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="reqAttrMask" output="reqAttrMask">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="forbiddenAttrMask" output="forbiddenAttrMask">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="attrAggregationRuleMask" output="attrAggregationRuleMask">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="minBuffer" output="minBuffer">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="targetBuffer" output="targetBuffer">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="maxBuffer" output="maxBuffer">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_NRTPollingService_to_SNME_NRTPollingService" from="xfd:NRTPollingService" to="snme:NRTPollingService">
        <transform input="envelope" output="envelope">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="xfd:Reserved3Bytes" to="snme:Reserved3Bytes" class="XFD_Reserved3Bytes_to_SNME_Reserved3Bytes" />
        </transform>
        <transform input="authNRTEnvelope" output="authNRTEnvelope">
            <use-transformer from="xfd:NRTPollingServiceEnvelope" to="snme:NRTPollingServiceEnvelope" class="XFD_NRTPollingServiceEnvelope_to_SNME_NRTPollingServiceEnvelope" />
        </transform>
        <transform input="authReservedNRTEnvelope" output="authReservedNRTEnvelope">
            <use-transformer from="xfd:AuthReservedNRTEnvelope" to="snme:AuthReservedNRTEnvelope" class="XFD_AuthReservedNRTEnvelope_to_SNME_AuthReservedNRTEnvelope" />
        </transform>
        <transform input="authReservedCommittedNRTEnvelope" output="authReservedCommittedNRTEnvelope">
            <use-transformer from="xfd:AuthReservedCommittedNRTEnvelope" to="snme:AuthReservedCommittedNRTEnvelope" class="XFD_AuthReservedCommittedNRTEnvelope_to_SNME_AuthReservedCommittedNRTEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedNRTEnvelope_to_SNME_AuthReservedNRTEnvelope" from="xfd:AuthReservedNRTEnvelope" to="snme:AuthReservedNRTEnvelope">
        <transform input="authorizedNRTEnvelope" output="authorizedNRTEnvelope">
            <use-transformer from="xfd:NRTPollingServiceEnvelope" to="snme:NRTPollingServiceEnvelope" class="XFD_NRTPollingServiceEnvelope_to_SNME_NRTPollingServiceEnvelope" />
        </transform>
        <transform input="reservedNRTEnvelope" output="reservedNRTEnvelope">
            <use-transformer from="xfd:NRTPollingServiceEnvelope" to="snme:NRTPollingServiceEnvelope" class="XFD_NRTPollingServiceEnvelope_to_SNME_NRTPollingServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedCommittedNRTEnvelope_to_SNME_AuthReservedCommittedNRTEnvelope" from="xfd:AuthReservedCommittedNRTEnvelope" to="snme:AuthReservedCommittedNRTEnvelope">
        <transform input="authorizedNRTEnvelope" output="authorizedNRTEnvelope">
            <use-transformer from="xfd:NRTPollingServiceEnvelope" to="snme:NRTPollingServiceEnvelope" class="XFD_NRTPollingServiceEnvelope_to_SNME_NRTPollingServiceEnvelope" />
        </transform>
        <transform input="reservedNRTEnvelope" output="reservedNRTEnvelope">
            <use-transformer from="xfd:NRTPollingServiceEnvelope" to="snme:NRTPollingServiceEnvelope" class="XFD_NRTPollingServiceEnvelope_to_SNME_NRTPollingServiceEnvelope" />
        </transform>
        <transform input="committedNRTEnvelope" output="committedNRTEnvelope">
            <use-transformer from="xfd:NRTPollingServiceEnvelope" to="snme:NRTPollingServiceEnvelope" class="XFD_NRTPollingServiceEnvelope_to_SNME_NRTPollingServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_NRTPollingServiceEnvelope_to_SNME_NRTPollingServiceEnvelope" from="xfd:NRTPollingServiceEnvelope" to="snme:NRTPollingServiceEnvelope">
        <transform input="trafficPriority" output="trafficPriority">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="commonServiceEnvelopePartOne" output="commonServiceEnvelopePartOne">
            <use-transformer from="xfd:CommonServiceEnvelopePartOne" to="snme:CommonServiceEnvelopePartOne" class="XFD_CommonServiceEnvelopePartOne_to_SNME_CommonServiceEnvelopePartOne" />
        </transform>
        <transform input="nominalPollingInterval" output="nominalPollingInterval">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="commonServiceEnvelopePartTwo" output="commonServiceEnvelopePartTwo">
            <use-transformer from="xfd:CommonServiceEnvelopePartTwo" to="snme:CommonServiceEnvelopePartTwo" class="XFD_CommonServiceEnvelopePartTwo_to_SNME_CommonServiceEnvelopePartTwo" />
        </transform>
    </transformer>

    <transformer id="XFD_RTPollingService_to_SNME_RTPollingService" from="xfd:RTPollingService" to="snme:RTPollingService">
        <transform input="envelope" output="envelope">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="xfd:Reserved3Bytes" to="snme:Reserved3Bytes" class="XFD_Reserved3Bytes_to_SNME_Reserved3Bytes" />
        </transform>
        <transform input="authRTEnvelope" output="authRTEnvelope">
            <use-transformer from="xfd:RTPollingServiceEnvelope" to="snme:RTPollingServiceEnvelope" class="XFD_RTPollingServiceEnvelope_to_SNME_RTPollingServiceEnvelope" />
        </transform>
        <transform input="authReservedRTEnvelope" output="authReservedRTEnvelope">
            <use-transformer from="xfd:AuthReservedRTEnvelope" to="snme:AuthReservedRTEnvelope" class="XFD_AuthReservedRTEnvelope_to_SNME_AuthReservedRTEnvelope" />
        </transform>
        <transform input="authReservedCommittedRTEnvelope" output="authReservedCommittedRTEnvelope">
            <use-transformer from="xfd:AuthReservedCommittedRTEnvelope" to="snme:AuthReservedCommittedRTEnvelope" class="XFD_AuthReservedCommittedRTEnvelope_to_SNME_AuthReservedCommittedRTEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedRTEnvelope_to_SNME_AuthReservedRTEnvelope" from="xfd:AuthReservedRTEnvelope" to="snme:AuthReservedRTEnvelope">
        <transform input="authorizedRTEnvelope" output="authorizedRTEnvelope">
            <use-transformer from="xfd:RTPollingServiceEnvelope" to="snme:RTPollingServiceEnvelope" class="XFD_RTPollingServiceEnvelope_to_SNME_RTPollingServiceEnvelope" />
        </transform>
        <transform input="reservedRTEnvelope" output="reservedRTEnvelope">
            <use-transformer from="xfd:RTPollingServiceEnvelope" to="snme:RTPollingServiceEnvelope" class="XFD_RTPollingServiceEnvelope_to_SNME_RTPollingServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedCommittedRTEnvelope_to_SNME_AuthReservedCommittedRTEnvelope" from="xfd:AuthReservedCommittedRTEnvelope" to="snme:AuthReservedCommittedRTEnvelope">
        <transform input="authorizedRTEnvelope" output="authorizedRTEnvelope">
            <use-transformer from="xfd:RTPollingServiceEnvelope" to="snme:RTPollingServiceEnvelope" class="XFD_RTPollingServiceEnvelope_to_SNME_RTPollingServiceEnvelope" />
        </transform>
        <transform input="reservedRTEnvelope" output="reservedRTEnvelope">
            <use-transformer from="xfd:RTPollingServiceEnvelope" to="snme:RTPollingServiceEnvelope" class="XFD_RTPollingServiceEnvelope_to_SNME_RTPollingServiceEnvelope" />
        </transform>
        <transform input="committedRTEnvelope" output="committedRTEnvelope">
            <use-transformer from="xfd:RTPollingServiceEnvelope" to="snme:RTPollingServiceEnvelope" class="XFD_RTPollingServiceEnvelope_to_SNME_RTPollingServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_RTPollingServiceEnvelope_to_SNME_RTPollingServiceEnvelope" from="xfd:RTPollingServiceEnvelope" to="snme:RTPollingServiceEnvelope">
        <transform input="commonServiceEnvelopePartOne" output="commonServiceEnvelopePartOne">
            <use-transformer from="xfd:CommonServiceEnvelopePartOne" to="snme:CommonServiceEnvelopePartOne" class="XFD_CommonServiceEnvelopePartOne_to_SNME_CommonServiceEnvelopePartOne" />
        </transform>
        <transform input="nominalPollingInterval" output="nominalPollingInterval">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="toleratedPollingJitter" output="toleratedPollingJitter">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="commonServiceEnvelopePartTwo" output="commonServiceEnvelopePartTwo">
            <use-transformer from="xfd:CommonServiceEnvelopePartTwo" to="snme:CommonServiceEnvelopePartTwo" class="XFD_CommonServiceEnvelopePartTwo_to_SNME_CommonServiceEnvelopePartTwo" />
        </transform>
    </transformer>

    <transformer id="XFD_UnsolicitedGrantService_to_SNME_UnsolicitedGrantService" from="xfd:UnsolicitedGrantService" to="snme:UnsolicitedGrantService">
        <transform input="envelope" output="envelope">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="xfd:Reserved3Bytes" to="snme:Reserved3Bytes" class="XFD_Reserved3Bytes_to_SNME_Reserved3Bytes" />
        </transform>
        <transform input="authUGCEnvelope" output="authUGCEnvelope">
            <use-transformer from="xfd:UGCServiceEnvelope" to="snme:UGCServiceEnvelope" class="XFD_UGCServiceEnvelope_to_SNME_UGCServiceEnvelope" />
        </transform>
        <transform input="authReservedUGCEnvelope" output="authReservedUGCEnvelope">
            <use-transformer from="xfd:AuthReservedUGCEnvelope" to="snme:AuthReservedUGCEnvelope" class="XFD_AuthReservedUGCEnvelope_to_SNME_AuthReservedUGCEnvelope" />
        </transform>
        <transform input="authReservedCommittedUGCEnvelope" output="authReservedCommittedUGCEnvelope">
            <use-transformer from="xfd:AuthReservedCommittedUGCEnvelope" to="snme:AuthReservedCommittedUGCEnvelope" class="XFD_AuthReservedCommittedUGCEnvelope_to_SNME_AuthReservedCommittedUGCEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedUGCEnvelope_to_SNME_AuthReservedUGCEnvelope" from="xfd:AuthReservedUGCEnvelope" to="snme:AuthReservedUGCEnvelope">
        <transform input="authorizedUGCEnvelope" output="authorizedUGCEnvelope">
            <use-transformer from="xfd:UGCServiceEnvelope" to="snme:UGCServiceEnvelope" class="XFD_UGCServiceEnvelope_to_SNME_UGCServiceEnvelope" />
        </transform>
        <transform input="reservedUGCEnvelope" output="reservedUGCEnvelope">
            <use-transformer from="xfd:UGCServiceEnvelope" to="snme:UGCServiceEnvelope" class="XFD_UGCServiceEnvelope_to_SNME_UGCServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedCommittedUGCEnvelope_to_SNME_AuthReservedCommittedUGCEnvelope" from="xfd:AuthReservedCommittedUGCEnvelope" to="snme:AuthReservedCommittedUGCEnvelope">
        <transform input="authorizedUGCEnvelope" output="authorizedUGCEnvelope">
            <use-transformer from="xfd:UGCServiceEnvelope" to="snme:UGCServiceEnvelope" class="XFD_UGCServiceEnvelope_to_SNME_UGCServiceEnvelope" />
        </transform>
        <transform input="reservedUGCEnvelope" output="reservedUGCEnvelope">
            <use-transformer from="xfd:UGCServiceEnvelope" to="snme:UGCServiceEnvelope" class="XFD_UGCServiceEnvelope_to_SNME_UGCServiceEnvelope" />
        </transform>
        <transform input="committedUGCEnvelope" output="committedUGCEnvelope">
            <use-transformer from="xfd:UGCServiceEnvelope" to="snme:UGCServiceEnvelope" class="XFD_UGCServiceEnvelope_to_SNME_UGCServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_UGCServiceEnvelope_to_SNME_UGCServiceEnvelope" from="xfd:UGCServiceEnvelope" to="snme:UGCServiceEnvelope">
        <transform input="requestTransmissionPolicy" output="requestTransmissionPolicy">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="unsolicitedGrantSize" output="unsolicitedGrantSize">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="grantsPerInterval" output="grantsPerInterval">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reserved" output="reserved">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="nominalGrantInterval" output="nominalGrantInterval">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="toleratedGrantJitter" output="toleratedGrantJitter">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="commonServiceEnvelopePartTwo" output="commonServiceEnvelopePartTwo">
            <use-transformer from="xfd:CommonServiceEnvelopePartTwo" to="snme:CommonServiceEnvelopePartTwo" class="XFD_CommonServiceEnvelopePartTwo_to_SNME_CommonServiceEnvelopePartTwo" />
        </transform>
    </transformer>

    <transformer id="XFD_UnsolicitedGrantServiceAD_to_SNME_UnsolicitedGrantServiceAD" from="xfd:UnsolicitedGrantServiceAD" to="snme:UnsolicitedGrantServiceAD">
        <transform input="envelope" output="envelope">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="xfd:Reserved3Bytes" to="snme:Reserved3Bytes" class="XFD_Reserved3Bytes_to_SNME_Reserved3Bytes" />
        </transform>
        <transform input="authUGCADEnvelope" output="authUGCADEnvelope">
            <use-transformer from="xfd:UGCADServiceEnvelope" to="snme:UGCADServiceEnvelope" class="XFD_UGCADServiceEnvelope_to_SNME_UGCADServiceEnvelope" />
        </transform>
        <transform input="authReservedUGCADEnvelope" output="authReservedUGCADEnvelope">
            <use-transformer from="xfd:AuthReservedUGCADEnvelope" to="snme:AuthReservedUGCADEnvelope" class="XFD_AuthReservedUGCADEnvelope_to_SNME_AuthReservedUGCADEnvelope" />
        </transform>
        <transform input="authReservedCommittedUGCADEnvelope" output="authReservedCommittedUGCADEnvelope">
            <use-transformer from="xfd:AuthReservedCommittedUGCADEnvelope" to="snme:AuthReservedCommittedUGCADEnvelope" class="XFD_AuthReservedCommittedUGCADEnvelope_to_SNME_AuthReservedCommittedUGCADEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedUGCADEnvelope_to_SNME_AuthReservedUGCADEnvelope" from="xfd:AuthReservedUGCADEnvelope" to="snme:AuthReservedUGCADEnvelope">
        <transform input="authorizedUGCADEnvelope" output="authorizedUGCADEnvelope">
            <use-transformer from="xfd:UGCADServiceEnvelope" to="snme:UGCADServiceEnvelope" class="XFD_UGCADServiceEnvelope_to_SNME_UGCADServiceEnvelope" />
        </transform>
        <transform input="reservedUGCADEnvelope" output="reservedUGCADEnvelope">
            <use-transformer from="xfd:UGCADServiceEnvelope" to="snme:UGCADServiceEnvelope" class="XFD_UGCADServiceEnvelope_to_SNME_UGCADServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedCommittedUGCADEnvelope_to_SNME_AuthReservedCommittedUGCADEnvelope" from="xfd:AuthReservedCommittedUGCADEnvelope" to="snme:AuthReservedCommittedUGCADEnvelope">
        <transform input="authorizedUGCADEnvelope" output="authorizedUGCADEnvelope">
            <use-transformer from="xfd:UGCADServiceEnvelope" to="snme:UGCADServiceEnvelope" class="XFD_UGCADServiceEnvelope_to_SNME_UGCADServiceEnvelope" />
        </transform>
        <transform input="reservedUGCADEnvelope" output="reservedUGCADEnvelope">
            <use-transformer from="xfd:UGCADServiceEnvelope" to="snme:UGCADServiceEnvelope" class="XFD_UGCADServiceEnvelope_to_SNME_UGCADServiceEnvelope" />
        </transform>
        <transform input="committedUGCADEnvelope" output="committedUGCADEnvelope">
            <use-transformer from="xfd:UGCADServiceEnvelope" to="snme:UGCADServiceEnvelope" class="XFD_UGCADServiceEnvelope_to_SNME_UGCADServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_UGCADServiceEnvelope_to_SNME_UGCADServiceEnvelope" from="xfd:UGCADServiceEnvelope" to="snme:UGCADServiceEnvelope">
        <transform input="requestTransmissionPolicy" output="requestTransmissionPolicy">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="unsolicitedGrantSize" output="unsolicitedGrantSize">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="grantsPerInterval" output="grantsPerInterval">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reserved" output="reserved">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="nominalGrantInterval" output="nominalGrantInterval">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="toleratedGrantJitter" output="toleratedGrantJitter">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="nominalPollingInterval" output="nominalPollingInterval">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="toleratedPollingJitter" output="toleratedPollingJitter">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="commonServiceEnvelopePartTwo" output="commonServiceEnvelopePartTwo">
            <use-transformer from="xfd:CommonServiceEnvelopePartTwo" to="snme:CommonServiceEnvelopePartTwo" class="XFD_CommonServiceEnvelopePartTwo_to_SNME_CommonServiceEnvelopePartTwo" />
        </transform>
    </transformer>

    <transformer id="XFD_DownstreamService_to_SNME_DownstreamService" from="xfd:DownstreamService" to="snme:DownstreamService">
        <transform input="envelope" output="envelope">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="xfd:Reserved3Bytes" to="snme:Reserved3Bytes" class="XFD_Reserved3Bytes_to_SNME_Reserved3Bytes" />
        </transform>
        <transform input="authDSEnvelope" output="authDSEnvelope">
            <use-transformer from="xfd:DSServiceEnvelope" to="snme:DSServiceEnvelope" class="XFD_DSServiceEnvelope_to_SNME_DSServiceEnvelope" />
        </transform>
        <transform input="authReservedDSEnvelope" output="authReservedDSEnvelope">
            <use-transformer from="xfd:AuthReservedDSEnvelope" to="snme:AuthReservedDSEnvelope" class="XFD_AuthReservedDSEnvelope_to_SNME_AuthReservedDSEnvelope" />
        </transform>
        <transform input="authReservedCommittedDSEnvelope" output="authReservedCommittedDSEnvelope">
            <use-transformer from="xfd:AuthReservedCommittedDSEnvelope" to="snme:AuthReservedCommittedDSEnvelope" class="XFD_AuthReservedCommittedDSEnvelope_to_SNME_AuthReservedCommittedDSEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedDSEnvelope_to_SNME_AuthReservedDSEnvelope" from="xfd:AuthReservedDSEnvelope" to="snme:AuthReservedDSEnvelope">
        <transform input="authorizedDSEnvelope" output="authorizedDSEnvelope">
            <use-transformer from="xfd:DSServiceEnvelope" to="snme:DSServiceEnvelope" class="XFD_DSServiceEnvelope_to_SNME_DSServiceEnvelope" />
        </transform>
        <transform input="reservedDSEnvelope" output="reservedDSEnvelope">
            <use-transformer from="xfd:DSServiceEnvelope" to="snme:DSServiceEnvelope" class="XFD_DSServiceEnvelope_to_SNME_DSServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_AuthReservedCommittedDSEnvelope_to_SNME_AuthReservedCommittedDSEnvelope" from="xfd:AuthReservedCommittedDSEnvelope" to="snme:AuthReservedCommittedDSEnvelope">
        <transform input="authorizedDSEnvelope" output="authorizedDSEnvelope">
            <use-transformer from="xfd:DSServiceEnvelope" to="snme:DSServiceEnvelope" class="XFD_DSServiceEnvelope_to_SNME_DSServiceEnvelope" />
        </transform>
        <transform input="reservedDSEnvelope" output="reservedDSEnvelope">
            <use-transformer from="xfd:DSServiceEnvelope" to="snme:DSServiceEnvelope" class="XFD_DSServiceEnvelope_to_SNME_DSServiceEnvelope" />
        </transform>
        <transform input="committedDSEnvelope" output="committedDSEnvelope">
            <use-transformer from="xfd:DSServiceEnvelope" to="snme:DSServiceEnvelope" class="XFD_DSServiceEnvelope_to_SNME_DSServiceEnvelope" />
        </transform>
    </transformer>

    <transformer id="XFD_DSServiceEnvelope_to_SNME_DSServiceEnvelope" from="xfd:DSServiceEnvelope" to="snme:DSServiceEnvelope">
        <transform input="trafficPriority" output="trafficPriority">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="downstreamReSeq" output="downstreamReSeq">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reserved2Bytes" output="reserved2Bytes">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="maxSustainedTrafficRate" output="maxSustainedTrafficRate">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="maxTrafficBurst" output="maxTrafficBurst">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="minReservedTrafficRate" output="minReservedTrafficRate">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="assumedMinResTrafRatePktSize" output="assumedMinResTrafRatePktSize">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="reserved" output="reserved">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="maxDownTimeLatency" output="maxDownTimeLatency">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
        <transform input="commonServiceEnvelopePartTwo" output="commonServiceEnvelopePartTwo">
            <use-transformer from="xfd:CommonServiceEnvelopePartTwo" to="snme:CommonServiceEnvelopePartTwo" class="XFD_CommonServiceEnvelopePartTwo_to_SNME_CommonServiceEnvelopePartTwo" />
        </transform>
    </transformer>

    <transformer id="XFD_UpstreamDrop_to_SNME_UpstreamDrop" from="xfd:UpstreamDrop" to="snme:UpstreamDrop">
        <transform input="envelope" output="envelope">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="reserved3Bytes" output="reserved3Bytes">
            <use-transformer from="xfd:Reserved3Bytes" to="snme:Reserved3Bytes" class="XFD_Reserved3Bytes_to_SNME_Reserved3Bytes" />
        </transform>
    </transformer>

    <transformer id="XFD_EventGenInfoIPv4_to_SNME_EventGenInfoIPv4" from="xfd:EventGenInfoIPv4" to="snme:EventGenInfoIPv4">
        <transform input="primaryRKSIPAddress" output="primaryRKSIPAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="primaryRKSIPPort" output="primaryRKSIPPort">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="primaryReserved" output="primaryReserved">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="secondaryRKSIPAddress" output="secondaryRKSIPAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="secondaryRKSIPPort" output="secondaryRKSIPPort">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="secondaryReserved" output="secondaryReserved">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="billingCorrelationID" output="billingCorrelationID">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
    </transformer>

    <transformer id="XFD_EventGenInfoIPv6_to_SNME_EventGenInfoIPv6" from="xfd:EventGenInfoIPv6" to="snme:EventGenInfoIPv6">
        <transform input="primaryRKSIPAddress" output="primaryRKSIPAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="primaryRKSIPPort" output="primaryRKSIPPort">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="primaryReserved" output="primaryReserved">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="secondaryRKSIPAddress" output="secondaryRKSIPAddress">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
        <transform input="secondaryRKSIPPort" output="secondaryRKSIPPort">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="secondaryReserved" output="secondaryReserved">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="billingCorrelationID" output="billingCorrelationID">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
    </transformer>

    <transformer id="XFD_VolumeBasedUsageLimit_to_SNME_VolumeBasedUsageLimit" from="xfd:VolumeBasedUsageLimit" to="snme:VolumeBasedUsageLimit">
        <transform input="usageLimit" output="usageLimit">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
    </transformer>

    <transformer id="XFD_TimeBasedUsageLimit_to_SNME_TimeBasedUsageLimit" from="xfd:TimeBasedUsageLimit" to="snme:TimeBasedUsageLimit">
        <transform input="timeLimit" output="timeLimit">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_OpaqueData_to_SNME_OpaqueData" from="xfd:OpaqueData" to="snme:OpaqueData">
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_GateTimeInfo_to_SNME_GateTimeInfo" from="xfd:GateTimeInfo" to="snme:GateTimeInfo">
        <transform input="timeCommitted" output="timeCommitted">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_GateUsageInfo_to_SNME_GateUsageInfo" from="xfd:GateUsageInfo" to="snme:GateUsageInfo">
        <transform input="octetCount" output="octetCount">
            <use-transformer from="byte[]" to="nme:byte-array" class="tnme:ByteArrayToByteArrayWrapper" />
        </transform>
    </transformer>

    <transformer id="XFD_PacketCableError_to_SNME_PacketCableError" from="xfd:PacketCableError" to="snme:PacketCableError">
        <transform input="errorCode" output="errorCode">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="errorSubCode" output="errorSubCode">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_GateState_to_SNME_GateState" from="xfd:GateState" to="snme:GateState">
        <transform input="state" output="state">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="reason" output="reason">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_VersionInfo_to_SNME_VersionInfo" from="xfd:VersionInfo" to="snme:VersionInfo">
        <transform input="majorVersionNumber" output="majorVersionNumber">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="minorVersionNumber" output="minorVersionNumber">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_PSID_to_SNME_PSID" from="xfd:PSID" to="snme:PSID">
        <transform input="pSID" output="pSID">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_SynchOptions_to_SNME_SynchOptions" from="xfd:SynchOptions" to="snme:SynchOptions">
        <transform input="reserved" output="reserved">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reportType" output="reportType">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="synchType" output="synchType">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey">
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_UserID_to_SNME_UserID" from="xfd:UserID" to="snme:UserID">
        <transform input="userID" output="userID">
            <use-transformer from="string" to="string" class="t:StringToStringCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_SharedResourceID_to_SNME_SharedResourceID" from="xfd:SharedResourceID" to="snme:SharedResourceID">
        <transform input="sharedResourceID" output="sharedResourceID">
            <use-transformer from="long" to="long" class="t:LongToLongCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_Handle_to_SNME_Handle" from="xfd:Handle" to="snme:Handle">
        <transform input="clientHandle" output="clientHandle">
            <use-transformer from="string" to="string" class="t:StringToStringCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_Context_to_SNME_Context" from="xfd:Context" to="snme:Context">
        <transform input="rType" output="rType">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="mType" output="mType">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_Reason_to_SNME_Reason" from="xfd:Reason" to="snme:Reason">
        <transform input="reasonCode" output="reasonCode">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reasonSubcode" output="reasonSubcode">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_DecisionCType1_to_SNME_DecisionCType1" from="xfd:DecisionCType1" to="snme:DecisionCType1">
        <transform input="commandCode" output="commandCode">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="flags" output="flags">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_Error_to_SNME_Error" from="xfd:Error" to="snme:Error">
        <transform input="errorCode" output="errorCode">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="errorSubCode" output="errorSubCode">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_CSICType2_to_SNME_CSICType2" from="xfd:CSICType2" to="snme:CSICType2">
        <transform input="csiNamedClient" output="csiNamedClient">
            <use-transformer from="string" to="string" class="t:StringToStringCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_KeepAliveTimer_to_SNME_KeepAliveTimer" from="xfd:KeepAliveTimer" to="snme:KeepAliveTimer">
        <transform input="reserved" output="reserved">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="kaTimerValue" output="kaTimerValue">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_PEPID_to_SNME_PEPID" from="xfd:PEPID" to="snme:PEPID">
        <transform input="pepID" output="pepID">
            <use-transformer from="string" to="string" class="t:StringToStringCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_ReportType_to_SNME_ReportType" from="xfd:ReportType" to="snme:ReportType">
        <transform input="reportType" output="reportType">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
        <transform input="reserved" output="reserved">
            <use-transformer from="short" to="short" class="t:ShortToShortCopy" />
        </transform>
    </transformer>

    <transformer id="XFD_GateControlCommand_to_SNME_GateControlCommand" from="xfd:GateControlCommand" to="snme:GateControlCommand">
        <transform input="length" output="length">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="sNum" output="sNum">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="sType" output="sType">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="transactionIdentifier" output="transactionIdentifier">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="gateCommandType" output="gateCommandType">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="gateSet" output="gateSet">
            <use-transformer from="xfd:GateSet" to="snme:GateSet" class="XFD_GateSet_to_SNME_GateSet" />
        </transform>
        <transform input="gateInfo" output="gateInfo">
            <use-transformer from="xfd:GateInfo" to="snme:GateInfo" class="XFD_GateInfo_to_SNME_GateInfo" />
        </transform>
        <transform input="gateDelete" output="gateDelete">
            <use-transformer from="xfd:GateDelete" to="snme:GateDelete" class="XFD_GateDelete_to_SNME_GateDelete" />
        </transform>
        <transform input="pdpConfig" output="pdpConfig">
            <use-transformer from="xfd:PdpConfig" to="snme:PdpConfig" class="XFD_PdpConfig_to_SNME_PdpConfig" />
        </transform>
        <transform input="synchRequest" output="synchRequest">
            <use-transformer from="xfd:SynchRequest" to="snme:SynchRequest" class="XFD_SynchRequest_to_SNME_SynchRequest" />
        </transform>
        <transform input="msgReceipt" output="msgReceipt">
            <use-transformer from="xfd:MsgReceipt" to="snme:MsgReceipt" class="XFD_MsgReceipt_to_SNME_MsgReceipt" />
        </transform>
    </transformer>

    <transformer id="XFD_GateSet_to_SNME_GateSet" from="xfd:GateSet" to="snme:GateSet">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="xfd:SubIDIPV4" to="snme:SubIDIPV4" class="XFD_SubIDIPV4_to_SNME_SubIDIPV4" />
        </transform>
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="xfd:SubIDIPV6" to="snme:SubIDIPV6" class="XFD_SubIDIPV6_to_SNME_SubIDIPV6" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="gateSpec" output="gateSpec">
            <use-transformer from="xfd:GateSpec" to="snme:GateSpec" class="XFD_GateSpec_to_SNME_GateSpec" />
        </transform>
        <transform input="flowSpec" output="flowSpec">
            <use-transformer from="xfd:FlowSpec" to="snme:FlowSpec" class="XFD_FlowSpec_to_SNME_FlowSpec" />
        </transform>
        <transform input="docSisServiceClass" output="docSisServiceClass">
            <use-transformer from="xfd:DocSisServiceClass" to="snme:DocSisServiceClass" class="XFD_DocSisServiceClass_to_SNME_DocSisServiceClass" />
        </transform>
        <transform input="bestEffortService" output="bestEffortService">
            <use-transformer from="xfd:BestEffortService" to="snme:BestEffortService" class="XFD_BestEffortService_to_SNME_BestEffortService" />
        </transform>
        <transform input="nrtPollingService" output="nrtPollingService">
            <use-transformer from="xfd:NRTPollingService" to="snme:NRTPollingService" class="XFD_NRTPollingService_to_SNME_NRTPollingService" />
        </transform>
        <transform input="rtPollingService" output="rtPollingService">
            <use-transformer from="xfd:RTPollingService" to="snme:RTPollingService" class="XFD_RTPollingService_to_SNME_RTPollingService" />
        </transform>
        <transform input="unsolicitedGrantService" output="unsolicitedGrantService">
            <use-transformer from="xfd:UnsolicitedGrantService" to="snme:UnsolicitedGrantService" class="XFD_UnsolicitedGrantService_to_SNME_UnsolicitedGrantService" />
        </transform>
        <transform input="unsolicitedGrantServiceAD" output="unsolicitedGrantServiceAD">
            <use-transformer from="xfd:UnsolicitedGrantServiceAD" to="snme:UnsolicitedGrantServiceAD" class="XFD_UnsolicitedGrantServiceAD_to_SNME_UnsolicitedGrantServiceAD" />
        </transform>
        <transform input="downstreamService" output="downstreamService">
            <use-transformer from="xfd:DownstreamService" to="snme:DownstreamService" class="XFD_DownstreamService_to_SNME_DownstreamService" />
        </transform>
        <transform input="upstreamDrop" output="upstreamDrop">
            <use-transformer from="xfd:UpstreamDrop" to="snme:UpstreamDrop" class="XFD_UpstreamDrop_to_SNME_UpstreamDrop" />
        </transform>
        <transform input="classifierArray" output="classifierArray">
            <transformer from="xfd:Classifier[]" to="snme:Classifier[]">
                <array>
                    <use-transformer from="xfd:Classifier" to="snme:Classifier" class="XFD_Classifier_to_SNME_Classifier" />
                </array>
            </transformer>
        </transform>
        <transform input="extendedClassifierArray" output="extendedClassifierArray">
            <transformer from="xfd:ExtendedClassifier[]" to="snme:ExtendedClassifier[]">
                <array>
                    <use-transformer from="xfd:ExtendedClassifier" to="snme:ExtendedClassifier" class="XFD_ExtendedClassifier_to_SNME_ExtendedClassifier" />
                </array>
            </transformer>
        </transform>
        <transform input="ipV6ClassifierArray" output="ipV6ClassifierArray">
            <transformer from="xfd:IPV6Classifier[]" to="snme:IPV6Classifier[]">
                <array>
                    <use-transformer from="xfd:IPV6Classifier" to="snme:IPV6Classifier" class="XFD_IPV6Classifier_to_SNME_IPV6Classifier" />
                </array>
            </transformer>
        </transform>
        <transform input="eventGenInfoIPv4" output="eventGenInfoIPv4">
            <use-transformer from="xfd:EventGenInfoIPv4" to="snme:EventGenInfoIPv4" class="XFD_EventGenInfoIPv4_to_SNME_EventGenInfoIPv4" />
        </transform>
        <transform input="eventGenInfoIPv6" output="eventGenInfoIPv6">
            <use-transformer from="xfd:EventGenInfoIPv6" to="snme:EventGenInfoIPv6" class="XFD_EventGenInfoIPv6_to_SNME_EventGenInfoIPv6" />
        </transform>
        <transform input="volumeBasedUsageLimit" output="volumeBasedUsageLimit">
            <use-transformer from="xfd:VolumeBasedUsageLimit" to="snme:VolumeBasedUsageLimit" class="XFD_VolumeBasedUsageLimit_to_SNME_VolumeBasedUsageLimit" />
        </transform>
        <transform input="timeBasedUsageLimit" output="timeBasedUsageLimit">
            <use-transformer from="xfd:TimeBasedUsageLimit" to="snme:TimeBasedUsageLimit" class="XFD_TimeBasedUsageLimit_to_SNME_TimeBasedUsageLimit" />
        </transform>
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="xfd:OpaqueData" to="snme:OpaqueData" class="XFD_OpaqueData_to_SNME_OpaqueData" />
        </transform>
        <transform input="userID" output="userID">
            <use-transformer from="xfd:UserID" to="snme:UserID" class="XFD_UserID_to_SNME_UserID" />
        </transform>
    </transformer>

    <transformer id="XFD_GateInfo_to_SNME_GateInfo" from="xfd:GateInfo" to="snme:GateInfo">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="xfd:SubIDIPV4" to="snme:SubIDIPV4" class="XFD_SubIDIPV4_to_SNME_SubIDIPV4" />
        </transform>
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="xfd:SubIDIPV6" to="snme:SubIDIPV6" class="XFD_SubIDIPV6_to_SNME_SubIDIPV6" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
    </transformer>

    <transformer id="XFD_GateDelete_to_SNME_GateDelete" from="xfd:GateDelete" to="snme:GateDelete">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="xfd:SubIDIPV4" to="snme:SubIDIPV4" class="XFD_SubIDIPV4_to_SNME_SubIDIPV4" />
        </transform>
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="xfd:SubIDIPV6" to="snme:SubIDIPV6" class="XFD_SubIDIPV6_to_SNME_SubIDIPV6" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
    </transformer>

    <transformer id="XFD_PdpConfig_to_SNME_PdpConfig" from="xfd:PdpConfig" to="snme:PdpConfig">
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
    </transformer>

    <transformer id="XFD_SynchRequest_to_SNME_SynchRequest" from="xfd:SynchRequest" to="snme:SynchRequest">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="xfd:SubIDIPV4" to="snme:SubIDIPV4" class="XFD_SubIDIPV4_to_SNME_SubIDIPV4" />
        </transform>
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="xfd:SubIDIPV6" to="snme:SubIDIPV6" class="XFD_SubIDIPV6_to_SNME_SubIDIPV6" />
        </transform>
        <transform input="synchOptions" output="synchOptions">
            <use-transformer from="xfd:SynchOptions" to="snme:SynchOptions" class="XFD_SynchOptions_to_SNME_SynchOptions" />
        </transform>
    </transformer>

    <transformer id="XFD_MsgReceipt_to_SNME_MsgReceipt" from="xfd:MsgReceipt" to="snme:MsgReceipt">
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
    </transformer>

    <transformer id="XFD_GateControlResponse_to_SNME_GateControlResponse" from="xfd:GateControlResponse" to="snme:GateControlResponse">
        <transform input="length" output="length">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="sNum" output="sNum">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="sType" output="sType">
            <use-transformer from="byte" to="byte" class="t:ByteToByteCopy" />
        </transform>
        <transform input="transactionIdentifier" output="transactionIdentifier">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="gateCommandType" output="gateCommandType">
            <use-transformer from="int" to="int" class="t:IntToIntCopy" />
        </transform>
        <transform input="gateSetAck" output="gateSetAck">
            <use-transformer from="xfd:GateSetAck" to="snme:GateSetAck" class="XFD_GateSetAck_to_SNME_GateSetAck" />
        </transform>
        <transform input="gateSetErr" output="gateSetErr">
            <use-transformer from="xfd:GateSetErr" to="snme:GateSetErr" class="XFD_GateSetErr_to_SNME_GateSetErr" />
        </transform>
        <transform input="gateInfoAck" output="gateInfoAck">
            <use-transformer from="xfd:GateInfoAck" to="snme:GateInfoAck" class="XFD_GateInfoAck_to_SNME_GateInfoAck" />
        </transform>
        <transform input="gateInfoErr" output="gateInfoErr">
            <use-transformer from="xfd:GateInfoErr" to="snme:GateInfoErr" class="XFD_GateInfoErr_to_SNME_GateInfoErr" />
        </transform>
        <transform input="gateDeleteAck" output="gateDeleteAck">
            <use-transformer from="xfd:GateDeleteAck" to="snme:GateDeleteAck" class="XFD_GateDeleteAck_to_SNME_GateDeleteAck" />
        </transform>
        <transform input="gateDeleteErr" output="gateDeleteErr">
            <use-transformer from="xfd:GateDeleteErr" to="snme:GateDeleteErr" class="XFD_GateDeleteErr_to_SNME_GateDeleteErr" />
        </transform>
        <transform input="gateReportState" output="gateReportState">
            <use-transformer from="xfd:GateReportState" to="snme:GateReportState" class="XFD_GateReportState_to_SNME_GateReportState" />
        </transform>
        <transform input="gateCmdErr" output="gateCmdErr">
            <use-transformer from="xfd:GateCmdErr" to="snme:GateCmdErr" class="XFD_GateCmdErr_to_SNME_GateCmdErr" />
        </transform>
        <transform input="pdpConfigAck" output="pdpConfigAck">
            <use-transformer from="xfd:PdpConfigAck" to="snme:PdpConfigAck" class="XFD_PdpConfigAck_to_SNME_PdpConfigAck" />
        </transform>
        <transform input="pdpConfigErr" output="pdpConfigErr">
            <use-transformer from="xfd:PdpConfigErr" to="snme:PdpConfigErr" class="XFD_PdpConfigErr_to_SNME_PdpConfigErr" />
        </transform>
        <transform input="synchReport" output="synchReport">
            <use-transformer from="xfd:SynchReport" to="snme:SynchReport" class="XFD_SynchReport_to_SNME_SynchReport" />
        </transform>
        <transform input="synchComplete" output="synchComplete">
            <use-transformer from="xfd:SynchComplete" to="snme:SynchComplete" class="XFD_SynchComplete_to_SNME_SynchComplete" />
        </transform>
    </transformer>

    <transformer id="XFD_GateSetAck_to_SNME_GateSetAck" from="xfd:GateSetAck" to="snme:GateSetAck">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="xfd:SubIDIPV4" to="snme:SubIDIPV4" class="XFD_SubIDIPV4_to_SNME_SubIDIPV4" />
        </transform>
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="xfd:SubIDIPV6" to="snme:SubIDIPV6" class="XFD_SubIDIPV6_to_SNME_SubIDIPV6" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="xfd:OpaqueData" to="snme:OpaqueData" class="XFD_OpaqueData_to_SNME_OpaqueData" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
        <transform input="sharedResourceID" output="sharedResourceID">
            <use-transformer from="xfd:SharedResourceID" to="snme:SharedResourceID" class="XFD_SharedResourceID_to_SNME_SharedResourceID" />
        </transform>
    </transformer>

    <transformer id="XFD_GateSetErr_to_SNME_GateSetErr" from="xfd:GateSetErr" to="snme:GateSetErr">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="xfd:SubIDIPV4" to="snme:SubIDIPV4" class="XFD_SubIDIPV4_to_SNME_SubIDIPV4" />
        </transform>
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="xfd:SubIDIPV6" to="snme:SubIDIPV6" class="XFD_SubIDIPV6_to_SNME_SubIDIPV6" />
        </transform>
        <transform input="packetCableError" output="packetCableError">
            <use-transformer from="xfd:PacketCableError" to="snme:PacketCableError" class="XFD_PacketCableError_to_SNME_PacketCableError" />
        </transform>
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="xfd:OpaqueData" to="snme:OpaqueData" class="XFD_OpaqueData_to_SNME_OpaqueData" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
    </transformer>

    <transformer id="XFD_GateInfoAck_to_SNME_GateInfoAck" from="xfd:GateInfoAck" to="snme:GateInfoAck">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="xfd:SubIDIPV4" to="snme:SubIDIPV4" class="XFD_SubIDIPV4_to_SNME_SubIDIPV4" />
        </transform>
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="xfd:SubIDIPV6" to="snme:SubIDIPV6" class="XFD_SubIDIPV6_to_SNME_SubIDIPV6" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="eventGenInfoIPv4" output="eventGenInfoIPv4">
            <use-transformer from="xfd:EventGenInfoIPv4" to="snme:EventGenInfoIPv4" class="XFD_EventGenInfoIPv4_to_SNME_EventGenInfoIPv4" />
        </transform>
        <transform input="eventGenInfoIPv6" output="eventGenInfoIPv6">
            <use-transformer from="xfd:EventGenInfoIPv6" to="snme:EventGenInfoIPv6" class="XFD_EventGenInfoIPv6_to_SNME_EventGenInfoIPv6" />
        </transform>
        <transform input="gateSpec" output="gateSpec">
            <use-transformer from="xfd:GateSpec" to="snme:GateSpec" class="XFD_GateSpec_to_SNME_GateSpec" />
        </transform>
        <transform input="classifierArray" output="classifierArray">
            <transformer from="xfd:Classifier[]" to="snme:Classifier[]">
                <array>
                    <use-transformer from="xfd:Classifier" to="snme:Classifier" class="XFD_Classifier_to_SNME_Classifier" />
                </array>
            </transformer>
        </transform>
        <transform input="extendedClassifierArray" output="extendedClassifierArray">
            <transformer from="xfd:ExtendedClassifier[]" to="snme:ExtendedClassifier[]">
                <array>
                    <use-transformer from="xfd:ExtendedClassifier" to="snme:ExtendedClassifier" class="XFD_ExtendedClassifier_to_SNME_ExtendedClassifier" />
                </array>
            </transformer>
        </transform>
        <transform input="ipV6ClassifierArray" output="ipV6ClassifierArray">
            <transformer from="xfd:IPV6Classifier[]" to="snme:IPV6Classifier[]">
                <array>
                    <use-transformer from="xfd:IPV6Classifier" to="snme:IPV6Classifier" class="XFD_IPV6Classifier_to_SNME_IPV6Classifier" />
                </array>
            </transformer>
        </transform>
        <transform input="flowSpec" output="flowSpec">
            <use-transformer from="xfd:FlowSpec" to="snme:FlowSpec" class="XFD_FlowSpec_to_SNME_FlowSpec" />
        </transform>
        <transform input="docSisServiceClass" output="docSisServiceClass">
            <use-transformer from="xfd:DocSisServiceClass" to="snme:DocSisServiceClass" class="XFD_DocSisServiceClass_to_SNME_DocSisServiceClass" />
        </transform>
        <transform input="bestEffortService" output="bestEffortService">
            <use-transformer from="xfd:BestEffortService" to="snme:BestEffortService" class="XFD_BestEffortService_to_SNME_BestEffortService" />
        </transform>
        <transform input="nrtPollingService" output="nrtPollingService">
            <use-transformer from="xfd:NRTPollingService" to="snme:NRTPollingService" class="XFD_NRTPollingService_to_SNME_NRTPollingService" />
        </transform>
        <transform input="rtPollingService" output="rtPollingService">
            <use-transformer from="xfd:RTPollingService" to="snme:RTPollingService" class="XFD_RTPollingService_to_SNME_RTPollingService" />
        </transform>
        <transform input="unsolicitedGrantService" output="unsolicitedGrantService">
            <use-transformer from="xfd:UnsolicitedGrantService" to="snme:UnsolicitedGrantService" class="XFD_UnsolicitedGrantService_to_SNME_UnsolicitedGrantService" />
        </transform>
        <transform input="unsolicitedGrantServiceAD" output="unsolicitedGrantServiceAD">
            <use-transformer from="xfd:UnsolicitedGrantServiceAD" to="snme:UnsolicitedGrantServiceAD" class="XFD_UnsolicitedGrantServiceAD_to_SNME_UnsolicitedGrantServiceAD" />
        </transform>
        <transform input="downstreamService" output="downstreamService">
            <use-transformer from="xfd:DownstreamService" to="snme:DownstreamService" class="XFD_DownstreamService_to_SNME_DownstreamService" />
        </transform>
        <transform input="upstreamDrop" output="upstreamDrop">
            <use-transformer from="xfd:UpstreamDrop" to="snme:UpstreamDrop" class="XFD_UpstreamDrop_to_SNME_UpstreamDrop" />
        </transform>
        <transform input="gateTimeInfo" output="gateTimeInfo">
            <use-transformer from="xfd:GateTimeInfo" to="snme:GateTimeInfo" class="XFD_GateTimeInfo_to_SNME_GateTimeInfo" />
        </transform>
        <transform input="gateUsageInfo" output="gateUsageInfo">
            <use-transformer from="xfd:GateUsageInfo" to="snme:GateUsageInfo" class="XFD_GateUsageInfo_to_SNME_GateUsageInfo" />
        </transform>
        <transform input="volumeBasedUsageLimit" output="volumeBasedUsageLimit">
            <use-transformer from="xfd:VolumeBasedUsageLimit" to="snme:VolumeBasedUsageLimit" class="XFD_VolumeBasedUsageLimit_to_SNME_VolumeBasedUsageLimit" />
        </transform>
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
        <transform input="userID" output="userID">
            <use-transformer from="xfd:UserID" to="snme:UserID" class="XFD_UserID_to_SNME_UserID" />
        </transform>
        <transform input="timeBasedUsageLimit" output="timeBasedUsageLimit">
            <use-transformer from="xfd:TimeBasedUsageLimit" to="snme:TimeBasedUsageLimit" class="XFD_TimeBasedUsageLimit_to_SNME_TimeBasedUsageLimit" />
        </transform>
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="xfd:OpaqueData" to="snme:OpaqueData" class="XFD_OpaqueData_to_SNME_OpaqueData" />
        </transform>
        <transform input="gateState" output="gateState">
            <use-transformer from="xfd:GateState" to="snme:GateState" class="XFD_GateState_to_SNME_GateState" />
        </transform>
        <transform input="sharedResourceID" output="sharedResourceID">
            <use-transformer from="xfd:SharedResourceID" to="snme:SharedResourceID" class="XFD_SharedResourceID_to_SNME_SharedResourceID" />
        </transform>
    </transformer>

    <transformer id="XFD_GateInfoErr_to_SNME_GateInfoErr" from="xfd:GateInfoErr" to="snme:GateInfoErr">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="packetCableError" output="packetCableError">
            <use-transformer from="xfd:PacketCableError" to="snme:PacketCableError" class="XFD_PacketCableError_to_SNME_PacketCableError" />
        </transform>
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="xfd:OpaqueData" to="snme:OpaqueData" class="XFD_OpaqueData_to_SNME_OpaqueData" />
        </transform>
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
    </transformer>

    <transformer id="XFD_GateDeleteAck_to_SNME_GateDeleteAck" from="xfd:GateDeleteAck" to="snme:GateDeleteAck">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="xfd:OpaqueData" to="snme:OpaqueData" class="XFD_OpaqueData_to_SNME_OpaqueData" />
        </transform>
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
    </transformer>

    <transformer id="XFD_GateDeleteErr_to_SNME_GateDeleteErr" from="xfd:GateDeleteErr" to="snme:GateDeleteErr">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="packetCableError" output="packetCableError">
            <use-transformer from="xfd:PacketCableError" to="snme:PacketCableError" class="XFD_PacketCableError_to_SNME_PacketCableError" />
        </transform>
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="xfd:OpaqueData" to="snme:OpaqueData" class="XFD_OpaqueData_to_SNME_OpaqueData" />
        </transform>
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
    </transformer>

    <transformer id="XFD_GateCmdErr_to_SNME_GateCmdErr" from="xfd:GateCmdErr" to="snme:GateCmdErr">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="packetCableError" output="packetCableError">
            <use-transformer from="xfd:PacketCableError" to="snme:PacketCableError" class="XFD_PacketCableError_to_SNME_PacketCableError" />
        </transform>
    </transformer>

    <transformer id="XFD_PdpConfigAck_to_SNME_PdpConfigAck" from="xfd:PdpConfigAck" to="snme:PdpConfigAck">
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
    </transformer>

    <transformer id="XFD_PdpConfigErr_to_SNME_PdpConfigErr" from="xfd:PdpConfigErr" to="snme:PdpConfigErr">
        <transform input="packetCableError" output="packetCableError">
            <use-transformer from="xfd:PacketCableError" to="snme:PacketCableError" class="XFD_PacketCableError_to_SNME_PacketCableError" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
    </transformer>

    <transformer id="XFD_SynchReport_to_SNME_SynchReport" from="xfd:SynchReport" to="snme:SynchReport">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="xfd:SubIDIPV4" to="snme:SubIDIPV4" class="XFD_SubIDIPV4_to_SNME_SubIDIPV4" />
        </transform>
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="xfd:SubIDIPV6" to="snme:SubIDIPV6" class="XFD_SubIDIPV6_to_SNME_SubIDIPV6" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="gateState" output="gateState">
            <use-transformer from="xfd:GateState" to="snme:GateState" class="XFD_GateState_to_SNME_GateState" />
        </transform>
        <transform input="gateTimeInfo" output="gateTimeInfo">
            <use-transformer from="xfd:GateTimeInfo" to="snme:GateTimeInfo" class="XFD_GateTimeInfo_to_SNME_GateTimeInfo" />
        </transform>
        <transform input="gateUsageInfo" output="gateUsageInfo">
            <use-transformer from="xfd:GateUsageInfo" to="snme:GateUsageInfo" class="XFD_GateUsageInfo_to_SNME_GateUsageInfo" />
        </transform>
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="xfd:OpaqueData" to="snme:OpaqueData" class="XFD_OpaqueData_to_SNME_OpaqueData" />
        </transform>
        <transform input="gateSpec" output="gateSpec">
            <use-transformer from="xfd:GateSpec" to="snme:GateSpec" class="XFD_GateSpec_to_SNME_GateSpec" />
        </transform>
        <transform input="flowSpec" output="flowSpec">
            <use-transformer from="xfd:FlowSpec" to="snme:FlowSpec" class="XFD_FlowSpec_to_SNME_FlowSpec" />
        </transform>
        <transform input="docSisServiceClass" output="docSisServiceClass">
            <use-transformer from="xfd:DocSisServiceClass" to="snme:DocSisServiceClass" class="XFD_DocSisServiceClass_to_SNME_DocSisServiceClass" />
        </transform>
        <transform input="bestEffortService" output="bestEffortService">
            <use-transformer from="xfd:BestEffortService" to="snme:BestEffortService" class="XFD_BestEffortService_to_SNME_BestEffortService" />
        </transform>
        <transform input="nrtPollingService" output="nrtPollingService">
            <use-transformer from="xfd:NRTPollingService" to="snme:NRTPollingService" class="XFD_NRTPollingService_to_SNME_NRTPollingService" />
        </transform>
        <transform input="rtPollingService" output="rtPollingService">
            <use-transformer from="xfd:RTPollingService" to="snme:RTPollingService" class="XFD_RTPollingService_to_SNME_RTPollingService" />
        </transform>
        <transform input="unsolicitedGrantService" output="unsolicitedGrantService">
            <use-transformer from="xfd:UnsolicitedGrantService" to="snme:UnsolicitedGrantService" class="XFD_UnsolicitedGrantService_to_SNME_UnsolicitedGrantService" />
        </transform>
        <transform input="unsolicitedGrantServiceAD" output="unsolicitedGrantServiceAD">
            <use-transformer from="xfd:UnsolicitedGrantServiceAD" to="snme:UnsolicitedGrantServiceAD" class="XFD_UnsolicitedGrantServiceAD_to_SNME_UnsolicitedGrantServiceAD" />
        </transform>
        <transform input="downstreamService" output="downstreamService">
            <use-transformer from="xfd:DownstreamService" to="snme:DownstreamService" class="XFD_DownstreamService_to_SNME_DownstreamService" />
        </transform>
        <transform input="upstreamDrop" output="upstreamDrop">
            <use-transformer from="xfd:UpstreamDrop" to="snme:UpstreamDrop" class="XFD_UpstreamDrop_to_SNME_UpstreamDrop" />
        </transform>
        <transform input="classifierArray" output="classifierArray">
            <transformer from="xfd:Classifier[]" to="snme:Classifier[]">
                <array>
                    <use-transformer from="xfd:Classifier" to="snme:Classifier" class="XFD_Classifier_to_SNME_Classifier" />
                </array>
            </transformer>
        </transform>
        <transform input="extendedClassifierArray" output="extendedClassifierArray">
            <transformer from="xfd:ExtendedClassifier[]" to="snme:ExtendedClassifier[]">
                <array>
                    <use-transformer from="xfd:ExtendedClassifier" to="snme:ExtendedClassifier" class="XFD_ExtendedClassifier_to_SNME_ExtendedClassifier" />
                </array>
            </transformer>
        </transform>
        <transform input="ipV6ClassifierArray" output="ipV6ClassifierArray">
            <transformer from="xfd:IPV6Classifier[]" to="snme:IPV6Classifier[]">
                <array>
                    <use-transformer from="xfd:IPV6Classifier" to="snme:IPV6Classifier" class="XFD_IPV6Classifier_to_SNME_IPV6Classifier" />
                </array>
            </transformer>
        </transform>
        <transform input="eventGenInfoIPv4" output="eventGenInfoIPv4">
            <use-transformer from="xfd:EventGenInfoIPv4" to="snme:EventGenInfoIPv4" class="XFD_EventGenInfoIPv4_to_SNME_EventGenInfoIPv4" />
        </transform>
        <transform input="eventGenInfoIPv6" output="eventGenInfoIPv6">
            <use-transformer from="xfd:EventGenInfoIPv6" to="snme:EventGenInfoIPv6" class="XFD_EventGenInfoIPv6_to_SNME_EventGenInfoIPv6" />
        </transform>
        <transform input="volumeBasedUsageLimit" output="volumeBasedUsageLimit">
            <use-transformer from="xfd:VolumeBasedUsageLimit" to="snme:VolumeBasedUsageLimit" class="XFD_VolumeBasedUsageLimit_to_SNME_VolumeBasedUsageLimit" />
        </transform>
        <transform input="timeBasedUsageLimit" output="timeBasedUsageLimit">
            <use-transformer from="xfd:TimeBasedUsageLimit" to="snme:TimeBasedUsageLimit" class="XFD_TimeBasedUsageLimit_to_SNME_TimeBasedUsageLimit" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
        <transform input="userID" output="userID">
            <use-transformer from="xfd:UserID" to="snme:UserID" class="XFD_UserID_to_SNME_UserID" />
        </transform>
        <transform input="sharedResourceID" output="sharedResourceID">
            <use-transformer from="xfd:SharedResourceID" to="snme:SharedResourceID" class="XFD_SharedResourceID_to_SNME_SharedResourceID" />
        </transform>
    </transformer>

    <transformer id="XFD_SynchComplete_to_SNME_SynchComplete" from="xfd:SynchComplete" to="snme:SynchComplete">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="psid" output="psid">
            <use-transformer from="xfd:PSID" to="snme:PSID" class="XFD_PSID_to_SNME_PSID" />
        </transform>
        <transform input="packetCableError" output="packetCableError">
            <use-transformer from="xfd:PacketCableError" to="snme:PacketCableError" class="XFD_PacketCableError_to_SNME_PacketCableError" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
    </transformer>

    <transformer id="XFD_GateReportState_to_SNME_GateReportState" from="xfd:GateReportState" to="snme:GateReportState">
        <transform input="amid" output="amid">
            <use-transformer from="xfd:AMID" to="snme:AMID" class="XFD_AMID_to_SNME_AMID" />
        </transform>
        <transform input="subIdIpV4" output="subIdIpV4">
            <use-transformer from="xfd:SubIDIPV4" to="snme:SubIDIPV4" class="XFD_SubIDIPV4_to_SNME_SubIDIPV4" />
        </transform>
        <transform input="subIdIpV6" output="subIdIpV6">
            <use-transformer from="xfd:SubIDIPV6" to="snme:SubIDIPV6" class="XFD_SubIDIPV6_to_SNME_SubIDIPV6" />
        </transform>
        <transform input="gateID" output="gateID">
            <use-transformer from="xfd:GateID" to="snme:GateID" class="XFD_GateID_to_SNME_GateID" />
        </transform>
        <transform input="gateState" output="gateState">
            <use-transformer from="xfd:GateState" to="snme:GateState" class="XFD_GateState_to_SNME_GateState" />
        </transform>
        <transform input="gateTimeInfo" output="gateTimeInfo">
            <use-transformer from="xfd:GateTimeInfo" to="snme:GateTimeInfo" class="XFD_GateTimeInfo_to_SNME_GateTimeInfo" />
        </transform>
        <transform input="gateUsageInfo" output="gateUsageInfo">
            <use-transformer from="xfd:GateUsageInfo" to="snme:GateUsageInfo" class="XFD_GateUsageInfo_to_SNME_GateUsageInfo" />
        </transform>
        <transform input="opaqueData" output="opaqueData">
            <use-transformer from="xfd:OpaqueData" to="snme:OpaqueData" class="XFD_OpaqueData_to_SNME_OpaqueData" />
        </transform>
        <transform input="messageReceiptKey" output="messageReceiptKey">
            <use-transformer from="xfd:MessageReceiptKey" to="snme:MessageReceiptKey" class="XFD_MessageReceiptKey_to_SNME_MessageReceiptKey" />
        </transform>
        <transform input="sharedResourceID" output="sharedResourceID">
            <use-transformer from="xfd:SharedResourceID" to="snme:SharedResourceID" class="XFD_SharedResourceID_to_SNME_SharedResourceID" />
        </transform>
    </transformer>
</transformations>